//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as dayjs from 'dayjs';

export class BankingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Insert ยอดเงินคงเหลือจากธนาคาร
     * @param body (optional)
     * @return Success
     */
    insertAccountBalance(body?: AccountBalanceDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<AccountBalanceDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/banking/accountbalance/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertAccountBalance(_response);
        });
    }

    protected processInsertAccountBalance(response: AxiosResponse): Promise<AccountBalanceDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<AccountBalanceDtoResponseServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AccountBalanceDtoResponseServiceResponse>(null as any);
    }
}

export class ClaimOnLineClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Get ข้อมูล ClaimOnLine Monitor
     * @param userId (optional)
     * @param statusId (optional)
     * @param branchId (optional)
     * @param insuranceCompany_SelectId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimOnLineMonitor(userId?: number | undefined, statusId?: number | undefined, branchId?: number | undefined, insuranceCompany_SelectId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimOnLineMonitorDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/filter?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (statusId === null)
            throw new Error("The parameter 'statusId' cannot be null.");
        else if (statusId !== undefined)
            url_ += "StatusId=" + encodeURIComponent("" + statusId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (insuranceCompany_SelectId === null)
            throw new Error("The parameter 'insuranceCompany_SelectId' cannot be null.");
        else if (insuranceCompany_SelectId !== undefined)
            url_ += "InsuranceCompany_SelectId=" + encodeURIComponent("" + insuranceCompany_SelectId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnLineMonitor(_response);
        });
    }

    protected processGetClaimOnLineMonitor(response: AxiosResponse): Promise<ClaimOnLineMonitorDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimOnLineMonitorDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimOnLineMonitorDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล บัญชีผู้รับสินไหมเดิม
     * @param claimonlineid (optional)
     * @param claimonlinecode (optional)
     * @return Success
     */
    getAccountClaimPay(claimonlineid?: string | undefined, claimonlinecode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<GetAccountClaimPayDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/oldaccount?";
        if (claimonlineid === null)
            throw new Error("The parameter 'claimonlineid' cannot be null.");
        else if (claimonlineid !== undefined)
            url_ += "claimonlineid=" + encodeURIComponent("" + claimonlineid) + "&";
        if (claimonlinecode === null)
            throw new Error("The parameter 'claimonlinecode' cannot be null.");
        else if (claimonlinecode !== undefined)
            url_ += "claimonlinecode=" + encodeURIComponent("" + claimonlinecode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAccountClaimPay(_response);
        });
    }

    protected processGetAccountClaimPay(response: AxiosResponse): Promise<GetAccountClaimPayDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetAccountClaimPayDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetAccountClaimPayDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ยอดวงเงินคงเหลือของผู้ที่ login
     * @return Success
     */
    getCreditLimit(userid: number, cancelToken?: CancelToken | undefined): Promise<CreditLimitDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/{userid}/creditlimit";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCreditLimit(_response);
        });
    }

    protected processGetCreditLimit(response: AxiosResponse): Promise<CreditLimitDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CreditLimitDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreditLimitDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายละเอียดบัญชี
     * @param productId (optional)
     * @param applicationCode (optional)
     * @return Success
     */
    getAccountDetail(productId?: number | undefined, applicationCode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<GetAccountDetailDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/account?";
        if (productId === null)
            throw new Error("The parameter 'productId' cannot be null.");
        else if (productId !== undefined)
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&";
        if (applicationCode === null)
            throw new Error("The parameter 'applicationCode' cannot be null.");
        else if (applicationCode !== undefined)
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAccountDetail(_response);
        });
    }

    protected processGetAccountDetail(response: AxiosResponse): Promise<GetAccountDetailDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetAccountDetailDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetAccountDetailDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายละเอียดเบอร์โทรผู้ติดต่อ
     * @param productId (optional)
     * @param applicationCode (optional)
     * @return Success
     */
    getPersonContactDetail(productId?: number | undefined, applicationCode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<GetPersonContactDetailDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/personcontact?";
        if (productId === null)
            throw new Error("The parameter 'productId' cannot be null.");
        else if (productId !== undefined)
            url_ += "ProductId=" + encodeURIComponent("" + productId) + "&";
        if (applicationCode === null)
            throw new Error("The parameter 'applicationCode' cannot be null.");
        else if (applicationCode !== undefined)
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPersonContactDetail(_response);
        });
    }

    protected processGetPersonContactDetail(response: AxiosResponse): Promise<GetPersonContactDetailDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetPersonContactDetailDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetPersonContactDetailDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Search ข้อมูล Customer PH
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getCustomerPH(searchType: number, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<CustomerPHSearchDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/customer/ph/filter?";
        if (searchType === undefined || searchType === null)
            throw new Error("The parameter 'searchType' must be defined and cannot be null.");
        else
            url_ += "SearchType=" + encodeURIComponent("" + searchType) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCustomerPH(_response);
        });
    }

    protected processGetCustomerPH(response: AxiosResponse): Promise<CustomerPHSearchDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CustomerPHSearchDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerPHSearchDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Customer Detail PH
     * @return Success
     */
    getCustomerDetailPH(applicationcode: string, cancelToken?: CancelToken | undefined): Promise<CustomerPHDetailDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/{applicationcode}/customer/detail/ph";
        if (applicationcode === undefined || applicationcode === null)
            throw new Error("The parameter 'applicationcode' must be defined.");
        url_ = url_.replace("{applicationcode}", encodeURIComponent("" + applicationcode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCustomerDetailPH(_response);
        });
    }

    protected processGetCustomerDetailPH(response: AxiosResponse): Promise<CustomerPHDetailDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CustomerPHDetailDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerPHDetailDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Validation ข้อมูล Create Claim PH
     * @param body (optional)
     * @return Success
     */
    validateCreateClaimPH(body?: ValidateCreateClaimPHDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<ValidateCreateClaimPHDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/validate/ph";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateCreateClaimPH(_response);
        });
    }

    protected processValidateCreateClaimPH(response: AxiosResponse): Promise<ValidateCreateClaimPHDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ValidateCreateClaimPHDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValidateCreateClaimPHDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Validation ข้อมูล OPD Claim PH
     * @param body (optional)
     * @return Success
     */
    validateOPDClaimPH(body?: ValidateMessageDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<ValidateMessageDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/validate/opd";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateOPDClaimPH(_response);
        });
    }

    protected processValidateOPDClaimPH(response: AxiosResponse): Promise<ValidateMessageDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ValidateMessageDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValidateMessageDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Group Year PA
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getYear(searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GroupYearPADtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/year/filter?";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetYear(_response);
        });
    }

    protected processGetYear(response: AxiosResponse): Promise<GroupYearPADtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GroupYearPADtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GroupYearPADtoResponseListServiceResponse>(null as any);
    }

    /**
     * Api สำหรับ Search / Get ข้อมูล School PA
     * @param year (optional)
     * @param provinceId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getSchool(year?: number | undefined, provinceId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetSchoolDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/school/filter?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (provinceId === null)
            throw new Error("The parameter 'provinceId' cannot be null.");
        else if (provinceId !== undefined)
            url_ += "ProvinceId=" + encodeURIComponent("" + provinceId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSchool(_response);
        });
    }

    protected processGetSchool(response: AxiosResponse): Promise<GetSchoolDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetSchoolDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetSchoolDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Search ข้อมูล Customer PA
     * @param applicationCode (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getCustomerPA(searchType: number, applicationCode?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<CustomerPASearchDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/customer/pa/filter?";
        if (searchType === undefined || searchType === null)
            throw new Error("The parameter 'searchType' must be defined and cannot be null.");
        else
            url_ += "SearchType=" + encodeURIComponent("" + searchType) + "&";
        if (applicationCode === null)
            throw new Error("The parameter 'applicationCode' cannot be null.");
        else if (applicationCode !== undefined)
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCustomerPA(_response);
        });
    }

    protected processGetCustomerPA(response: AxiosResponse): Promise<CustomerPASearchDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CustomerPASearchDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerPASearchDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Customer Detail PA
     * @return Success
     */
    getCustomerDetailPA(customercode: string, cancelToken?: CancelToken | undefined): Promise<CustomerPADetailDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/{customercode}/customer/detail/pa";
        if (customercode === undefined || customercode === null)
            throw new Error("The parameter 'customercode' must be defined.");
        url_ = url_.replace("{customercode}", encodeURIComponent("" + customercode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCustomerDetailPA(_response);
        });
    }

    protected processGetCustomerDetailPA(response: AxiosResponse): Promise<CustomerPADetailDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CustomerPADetailDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerPADetailDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimAdmitType By ProductCategory PA
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimAdmitTypePA(productCategoryCode: string, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimAdmitTypePADtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimadmittype/pa/filter?";
        if (productCategoryCode === undefined || productCategoryCode === null)
            throw new Error("The parameter 'productCategoryCode' must be defined and cannot be null.");
        else
            url_ += "ProductCategoryCode=" + encodeURIComponent("" + productCategoryCode) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimAdmitTypePA(_response);
        });
    }

    protected processGetClaimAdmitTypePA(response: AxiosResponse): Promise<ClaimAdmitTypePADtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimAdmitTypePADtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimAdmitTypePADtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Validation ข้อมูล Create Claim PA
     * @param body (optional)
     * @return Success
     */
    validateCreateClaimPA(body?: ValidateCreateClaimPADtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<ValidateCreateClaimPADtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/validate/pa";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateCreateClaimPA(_response);
        });
    }

    protected processValidateCreateClaimPA(response: AxiosResponse): Promise<ValidateCreateClaimPADtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ValidateCreateClaimPADtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValidateCreateClaimPADtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Validation วันที่เข้าโรงพยาบาล
     * @param body (optional)
     * @return Success
     */
    validateAdmitDate(body?: ValidateAdmitDateDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<ValidateAdmitDateDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/validate/admitdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateAdmitDate(_response);
        });
    }

    protected processValidateAdmitDate(response: AxiosResponse): Promise<ValidateAdmitDateDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ValidateAdmitDateDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValidateAdmitDateDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Create ClaimOnLine
     * @param body (optional)
     * @return Success
     */
    createClaimOnLine(body?: CreateClaimOnLineDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<CreateClaimOnLineDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateClaimOnLine(_response);
        });
    }

    protected processCreateClaimOnLine(response: AxiosResponse): Promise<CreateClaimOnLineDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CreateClaimOnLineDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateClaimOnLineDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Insert ข้อมูล ClaimOnLineCancelCause หน้ายกเลิกเคลม
     * @param body (optional)
     * @return Success
     */
    insertClaimOnLineCancelCause(body?: InsertClaimOnLineCancelCauseDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<InsertClaimOnLineCancelCauseDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/cancel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertClaimOnLineCancelCause(_response);
        });
    }

    protected processInsertClaimOnLineCancelCause(response: AxiosResponse): Promise<InsertClaimOnLineCancelCauseDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<InsertClaimOnLineCancelCauseDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InsertClaimOnLineCancelCauseDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Insert ข้อมูล Customer Bank Account
     * @param body (optional)
     * @return Success
     */
    createCustomerBankAccount(body?: CreateCustomerBankAccountDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<CreateCustomerBankAccountDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/insert/bank";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateCustomerBankAccount(_response);
        });
    }

    protected processCreateCustomerBankAccount(response: AxiosResponse): Promise<CreateCustomerBankAccountDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CreateCustomerBankAccountDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateCustomerBankAccountDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Update ข้อมูล IsActive Customer Bank Account
     * @param customerBankAccountId (optional)
     * @return Success
     */
    updateCustomerBankAccount(customerBankAccountId?: string | undefined, cancelToken?: CancelToken | undefined): Promise<UpdateCustomerBankAccountDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/update/bank?";
        if (customerBankAccountId === null)
            throw new Error("The parameter 'customerBankAccountId' cannot be null.");
        else if (customerBankAccountId !== undefined)
            url_ += "customerBankAccountId=" + encodeURIComponent("" + customerBankAccountId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateCustomerBankAccount(_response);
        });
    }

    protected processUpdateCustomerBankAccount(response: AxiosResponse): Promise<UpdateCustomerBankAccountDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<UpdateCustomerBankAccountDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateCustomerBankAccountDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ อนุมัติขยายวงเงิน
     * @param body (optional)
     * @return Success
     */
    overTransaction(body?: OverTransactionRequestDto | undefined, cancelToken?: CancelToken | undefined): Promise<OverTransactionResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/claim/overtransaction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processOverTransaction(_response);
        });
    }

    protected processOverTransaction(response: AxiosResponse): Promise<OverTransactionResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OverTransactionResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OverTransactionResponseDtoServiceResponse>(null as any);
    }

    /**
     * API สำหรับ ClaimPayGroupStatus Verification
     * @param body (optional)
     * @return Success
     */
    claimPayGroupVerification(claimPayGroupId: string, body?: ClaimPayGroupStatusDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPayGroupStatusDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimpaygroup/{claimPayGroupId}/verification";
        if (claimPayGroupId === undefined || claimPayGroupId === null)
            throw new Error("The parameter 'claimPayGroupId' must be defined.");
        url_ = url_.replace("{claimPayGroupId}", encodeURIComponent("" + claimPayGroupId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processClaimPayGroupVerification(_response);
        });
    }

    protected processClaimPayGroupVerification(response: AxiosResponse): Promise<ClaimPayGroupStatusDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayGroupStatusDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayGroupStatusDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimPayGroupOver Monitor
     * @param branchId (optional)
     * @param paymentStatusId (optional)
     * @param searchIndex (optional)
     * @param searchDetail (optional)
     * @param claimOnLineCode (optional)
     * @param payeeAccountNo (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimPayGroupOver(dateFrom: dayjs.Dayjs, dateTo: dayjs.Dayjs, branchId?: number | undefined, paymentStatusId?: number | undefined, searchIndex?: number | undefined, searchDetail?: string | undefined, claimOnLineCode?: string | undefined, payeeAccountNo?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPayGroupOverDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimpaygroupover?";
        if (dateFrom === undefined || dateFrom === null)
            throw new Error("The parameter 'dateFrom' must be defined and cannot be null.");
        else
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === undefined || dateTo === null)
            throw new Error("The parameter 'dateTo' must be defined and cannot be null.");
        else
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (paymentStatusId === null)
            throw new Error("The parameter 'paymentStatusId' cannot be null.");
        else if (paymentStatusId !== undefined)
            url_ += "PaymentStatusId=" + encodeURIComponent("" + paymentStatusId) + "&";
        if (searchIndex === null)
            throw new Error("The parameter 'searchIndex' cannot be null.");
        else if (searchIndex !== undefined)
            url_ += "SearchIndex=" + encodeURIComponent("" + searchIndex) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (payeeAccountNo === null)
            throw new Error("The parameter 'payeeAccountNo' cannot be null.");
        else if (payeeAccountNo !== undefined)
            url_ += "PayeeAccountNo=" + encodeURIComponent("" + payeeAccountNo) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPayGroupOver(_response);
        });
    }

    protected processGetClaimPayGroupOver(response: AxiosResponse): Promise<ClaimPayGroupOverDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayGroupOverDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayGroupOverDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimPayCredit Monitor
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    claimPayCredit(claimPayGroupId: string, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPayGroupCreditDtoReponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimpaycredit?";
        if (claimPayGroupId === undefined || claimPayGroupId === null)
            throw new Error("The parameter 'claimPayGroupId' must be defined and cannot be null.");
        else
            url_ += "ClaimPayGroupId=" + encodeURIComponent("" + claimPayGroupId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processClaimPayCredit(_response);
        });
    }

    protected processClaimPayCredit(response: AxiosResponse): Promise<ClaimPayGroupCreditDtoReponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayGroupCreditDtoReponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayGroupCreditDtoReponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูลการโอนเงินที่ไม่สำเร็จ เพื่อแก้ไขเลขที่บัญขี
     * @return Success
     */
    getLastFailTransfer(claimPayGroupId: string, cancelToken?: CancelToken | undefined): Promise<LastTransferTransactionDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/{claimPayGroupId}/lastfail-transfer";
        if (claimPayGroupId === undefined || claimPayGroupId === null)
            throw new Error("The parameter 'claimPayGroupId' must be defined.");
        url_ = url_.replace("{claimPayGroupId}", encodeURIComponent("" + claimPayGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLastFailTransfer(_response);
        });
    }

    protected processGetLastFailTransfer(response: AxiosResponse): Promise<LastTransferTransactionDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<LastTransferTransactionDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LastTransferTransactionDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ สร้าง ClaimPayTransaction ใหม่ (โอนอีกครั้ง)
     * @param body (optional)
     * @return Success
     */
    reCreateClaimPayTransaction(body?: CreateClaimPayTransactionDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<CreateClaimOnLineDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/ReCreateClaimPayTransaction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReCreateClaimPayTransaction(_response);
        });
    }

    protected processReCreateClaimPayTransaction(response: AxiosResponse): Promise<CreateClaimOnLineDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CreateClaimOnLineDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateClaimOnLineDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ ข้อมูลที่ทำรายการเสร็จสิ้น
     * @return Success
     */
    getClaimOnlineSuccess(claimOnlineCode: string, cancelToken?: CancelToken | undefined): Promise<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimonline/success/{claimOnlineCode}";
        if (claimOnlineCode === undefined || claimOnlineCode === null)
            throw new Error("The parameter 'claimOnlineCode' must be defined.");
        url_ = url_.replace("{claimOnlineCode}", encodeURIComponent("" + claimOnlineCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnlineSuccess(_response);
        });
    }

    protected processGetClaimOnlineSuccess(response: AxiosResponse): Promise<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ เช็คเคลมออนไลน์
     * @param claimOnlineStatusId (optional)
     * @param userId (optional)
     * @param branchId (optional)
     * @return Success
     */
    getClaimOnlineByClaimOnLineStatusId(claimOnlineCode: string, claimOnlineStatusId?: number | undefined, userId?: number | undefined, branchId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimonline/status-search?";
        if (claimOnlineCode === undefined || claimOnlineCode === null)
            throw new Error("The parameter 'claimOnlineCode' must be defined and cannot be null.");
        else
            url_ += "ClaimOnlineCode=" + encodeURIComponent("" + claimOnlineCode) + "&";
        if (claimOnlineStatusId === null)
            throw new Error("The parameter 'claimOnlineStatusId' cannot be null.");
        else if (claimOnlineStatusId !== undefined)
            url_ += "ClaimOnlineStatusId=" + encodeURIComponent("" + claimOnlineStatusId) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnlineByClaimOnLineStatusId(_response);
        });
    }

    protected processGetClaimOnlineByClaimOnLineStatusId(response: AxiosResponse): Promise<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล แก้ไขการโอนเงิน
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimPaymentStatusFive(searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPaymentStatusFiveDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimpaymentstatusfive?";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPaymentStatusFive(_response);
        });
    }

    protected processGetClaimPaymentStatusFive(response: AxiosResponse): Promise<ClaimPaymentStatusFiveDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPaymentStatusFiveDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPaymentStatusFiveDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล แก้ไขการโอนเงิน ตอนกด Expand
     * @return Success
     */
    getClaimPaymentStatusFiveDetail(claimPayGroupId: string, cancelToken?: CancelToken | undefined): Promise<ClaimPaymentStatusFiveDetailDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimpaymentstatusfivedetail?";
        if (claimPayGroupId === undefined || claimPayGroupId === null)
            throw new Error("The parameter 'claimPayGroupId' must be defined and cannot be null.");
        else
            url_ += "claimPayGroupId=" + encodeURIComponent("" + claimPayGroupId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPaymentStatusFiveDetail(_response);
        });
    }

    protected processGetClaimPaymentStatusFiveDetail(response: AxiosResponse): Promise<ClaimPaymentStatusFiveDetailDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPaymentStatusFiveDetailDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPaymentStatusFiveDetailDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Update ClaimAdmitType
     * @param body (optional)
     * @return Success
     */
    claimAdmitTypeEdit(body?: ClaimAdmitTypeEditDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimAdmitTypeEditDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimadmittypeedit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processClaimAdmitTypeEdit(_response);
        });
    }

    protected processClaimAdmitTypeEdit(response: AxiosResponse): Promise<ClaimAdmitTypeEditDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimAdmitTypeEditDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimAdmitTypeEditDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Manual Inquiry
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimPayForInquiry(searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPayForInquiryDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimpayforinquiry?";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPayForInquiry(_response);
        });
    }

    protected processGetClaimPayForInquiry(response: AxiosResponse): Promise<ClaimPayForInquiryDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayForInquiryDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayForInquiryDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimPayGroup PaymentStatus 7
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimPaymentStatusSeven(searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPaymentStatusSevenDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/claimpaymentstatusseven?";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPaymentStatusSeven(_response);
        });
    }

    protected processGetClaimPaymentStatusSeven(response: AxiosResponse): Promise<ClaimPaymentStatusSevenDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPaymentStatusSevenDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPaymentStatusSevenDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ สร้าง ClaimPayTransaction ใหม่ (โอนเงินทันที)
     * @param body (optional)
     * @return Success
     */
    reCreateClaimPayTransactionExpress(body?: CreateClaimPayTransactionDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<CreateClaimOnLineDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/ReCreateClaimPayTransaction/express";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReCreateClaimPayTransactionExpress(_response);
        });
    }

    protected processReCreateClaimPayTransactionExpress(response: AxiosResponse): Promise<CreateClaimOnLineDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CreateClaimOnLineDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateClaimOnLineDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Insert แจ้งแก้ไขเคลมผิดคน
     * @param body (optional)
     * @return Success
     */
    insertClaimMistake(body?: ClaimMistakeDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<InsertClaimMistakeDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/insert/claimmistake";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertClaimMistake(_response);
        });
    }

    protected processInsertClaimMistake(response: AxiosResponse): Promise<InsertClaimMistakeDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<InsertClaimMistakeDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InsertClaimMistakeDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ โอนย้าย Transaction (CPG)
     * @param body (optional)
     * @return Success
     */
    transferCpg(body?: TransferCpgDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<TransferCpgDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/transfercpg";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTransferCpg(_response);
        });
    }

    protected processTransferCpg(response: AxiosResponse): Promise<TransferCpgDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<TransferCpgDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TransferCpgDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล DocumentType
     * @param productId (optional)
     * @return Success
     */
    getDocumentType(productId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<DocumentTypeDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claim/documenttype?";
        if (productId === null)
            throw new Error("The parameter 'productId' cannot be null.");
        else if (productId !== undefined)
            url_ += "productId=" + encodeURIComponent("" + productId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDocumentType(_response);
        });
    }

    protected processGetDocumentType(response: AxiosResponse): Promise<DocumentTypeDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DocumentTypeDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DocumentTypeDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Insert Document
     * @param claimOnlineItemId (optional)
     * @param userId (optional)
     * @param body (optional)
     * @return Success
     */
    insertDocument(claimOnlineItemId?: string | undefined, userId?: number | undefined, body?: CreateDocumentDtoRequest[] | undefined, cancelToken?: CancelToken | undefined): Promise<BaseResponseServiceResponse> {
        let url_ = this.baseUrl + "/claim/insert/document?";
        if (claimOnlineItemId === null)
            throw new Error("The parameter 'claimOnlineItemId' cannot be null.");
        else if (claimOnlineItemId !== undefined)
            url_ += "claimOnlineItemId=" + encodeURIComponent("" + claimOnlineItemId) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertDocument(_response);
        });
    }

    protected processInsertDocument(response: AxiosResponse): Promise<BaseResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<BaseResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BaseResponseServiceResponse>(null as any);
    }
}

export class ClaimReceiveClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Insert ClaimReceiveGroup
     * @param body (optional)
     * @return Success
     */
    insertClaimReceiveGroup(body?: ClaimReceiveGroupDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimReceiveGroupDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/receive/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertClaimReceiveGroup(_response);
        });
    }

    protected processInsertClaimReceiveGroup(response: AxiosResponse): Promise<ClaimReceiveGroupDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimReceiveGroupDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimReceiveGroupDtoResponseServiceResponse>(null as any);
    }
}

export class ClaimSmiConsumerClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional)
     * @return Success
     */
    insertClaimSMI(body?: SMIClaimApprovalGroupResponse | undefined, cancelToken?: CancelToken | undefined): Promise<InsertClaimSmiDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claimsmi/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertClaimSMI(_response);
        });
    }

    protected processInsertClaimSMI(response: AxiosResponse): Promise<InsertClaimSmiDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<InsertClaimSmiDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InsertClaimSmiDtoResponseServiceResponse>(null as any);
    }
}

export class DashboardClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ติดตามการตัดรับชำระจากกองทุน
     * @return Success
     */
    getDashboardDifferanceAmountClaim( cancelToken?: CancelToken | undefined): Promise<DashboardDifferanceAmountClaimDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/differanceamount-claim";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDashboardDifferanceAmountClaim(_response);
        });
    }

    protected processGetDashboardDifferanceAmountClaim(response: AxiosResponse): Promise<DashboardDifferanceAmountClaimDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardDifferanceAmountClaimDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardDifferanceAmountClaimDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard สำหรับติดตามเคลมที่รอดำเนินการ
     * @param dateFrom (optional)
     * @return Success
     */
    getDashboardClaimPending(dateFrom?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<DashboardClaimPendingDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/claimpending?";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "dateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDashboardClaimPending(_response);
        });
    }

    protected processGetDashboardClaimPending(response: AxiosResponse): Promise<DashboardClaimPendingDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardClaimPendingDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardClaimPendingDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ยอดเงินคงเหลือในบัญชี
     * @return Success
     */
    getAccountBalance( cancelToken?: CancelToken | undefined): Promise<DashboardAccountBalanceDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/accountbalance";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAccountBalance(_response);
        });
    }

    protected processGetAccountBalance(response: AxiosResponse): Promise<DashboardAccountBalanceDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardAccountBalanceDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardAccountBalanceDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ติดตามการโอนเงิน
     * @param dateFrom (optional)
     * @return Success
     */
    getTransferTrack(dateFrom?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<DashboardTransferTrackDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/transfertrack?";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "dateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferTrack(_response);
        });
    }

    protected processGetTransferTrack(response: AxiosResponse): Promise<DashboardTransferTrackDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardTransferTrackDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardTransferTrackDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ยอดเงินเคลมย้อนหลัง
     * @param dateFrom (optional)
     * @return Success
     */
    getRetrospectiveTransfer(dateFrom?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<DashboardRetrospectiveTransferDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/retrospectivetransfer?";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "dateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRetrospectiveTransfer(_response);
        });
    }

    protected processGetRetrospectiveTransfer(response: AxiosResponse): Promise<DashboardRetrospectiveTransferDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardRetrospectiveTransferDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardRetrospectiveTransferDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ติดตามการโอนเงินรวมทั้งหมด
     * @param userId (optional)
     * @param dateFrom (optional)
     * @param dateTo (optional)
     * @return Success
     */
    getTransferTrackDetailTotal(userId?: number | undefined, dateFrom?: dayjs.Dayjs | undefined, dateTo?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<DashboardTransferTrackDetailTotalDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/transfertrackdetail?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferTrackDetailTotal(_response);
        });
    }

    protected processGetTransferTrackDetailTotal(response: AxiosResponse): Promise<DashboardTransferTrackDetailTotalDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardTransferTrackDetailTotalDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardTransferTrackDetailTotalDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ติดตามการโอนเงินเพิ่ม
     * @param userId (optional)
     * @param dateFrom (optional)
     * @param dateTo (optional)
     * @return Success
     */
    getTransferTrackContinueDetailTotal(userId?: number | undefined, dateFrom?: dayjs.Dayjs | undefined, dateTo?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<DashboardTransferTrackDetailConDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/transfertrackdetail-continue?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferTrackContinueDetailTotal(_response);
        });
    }

    protected processGetTransferTrackContinueDetailTotal(response: AxiosResponse): Promise<DashboardTransferTrackDetailConDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardTransferTrackDetailConDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardTransferTrackDetailConDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ติดตามการคืนเงิน
     * @param userId (optional)
     * @param dateFrom (optional)
     * @param dateTo (optional)
     * @return Success
     */
    getTransferTrackRefundDetailTotal(userId?: number | undefined, dateFrom?: dayjs.Dayjs | undefined, dateTo?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<DashboardTransferTrackDetailRefundDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/retrospectivetransfer-refund?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferTrackRefundDetailTotal(_response);
        });
    }

    protected processGetTransferTrackRefundDetailTotal(response: AxiosResponse): Promise<DashboardTransferTrackDetailRefundDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DashboardTransferTrackDetailRefundDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardTransferTrackDetailRefundDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Dashboard ติดตามสถานะเคลม
     * @param userId (optional)
     * @param dateFrom (optional)
     * @param dateTo (optional)
     * @return Success
     */
    getClaimStatusTrack(userId?: number | undefined, dateFrom?: dayjs.Dayjs | undefined, dateTo?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<DasboardClaimStatusTrackResponseListServiceResponse> {
        let url_ = this.baseUrl + "/dashboard/claimonlinestatus?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimStatusTrack(_response);
        });
    }

    protected processGetClaimStatusTrack(response: AxiosResponse): Promise<DasboardClaimStatusTrackResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DasboardClaimStatusTrackResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DasboardClaimStatusTrackResponseListServiceResponse>(null as any);
    }
}

export class HospitalClaimTrackingClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Get ข้อมูล ตาราง งานเคลมโรงพยาบาล (หลังจาก สแกน)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getHospitalClaimTrackingTmp(createdByUserId: number, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<HospitalClaimTrackingTmpDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claimtracking/temp/filter?";
        if (createdByUserId === undefined || createdByUserId === null)
            throw new Error("The parameter 'createdByUserId' must be defined and cannot be null.");
        else
            url_ += "CreatedByUserId=" + encodeURIComponent("" + createdByUserId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHospitalClaimTrackingTmp(_response);
        });
    }

    protected processGetHospitalClaimTrackingTmp(response: AxiosResponse): Promise<HospitalClaimTrackingTmpDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<HospitalClaimTrackingTmpDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalClaimTrackingTmpDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายละเอียดใน HospitalClaimTracking
     * @param createdDate (optional)
     * @param hospitalReceiveDocAdmitTypeId (optional)
     * @param userId (optional)
     * @param searchType (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getHospitalClaimTrackingDetail(createdDate?: dayjs.Dayjs | undefined, hospitalReceiveDocAdmitTypeId?: number | undefined, userId?: number | undefined, searchType?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetHospitalClaimTrackingDetailDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claimtracking/HospitalClaimTracking/detail/filter?";
        if (createdDate === null)
            throw new Error("The parameter 'createdDate' cannot be null.");
        else if (createdDate !== undefined)
            url_ += "CreatedDate=" + encodeURIComponent(createdDate ? "" + createdDate.toISOString() : "") + "&";
        if (hospitalReceiveDocAdmitTypeId === null)
            throw new Error("The parameter 'hospitalReceiveDocAdmitTypeId' cannot be null.");
        else if (hospitalReceiveDocAdmitTypeId !== undefined)
            url_ += "HospitalReceiveDocAdmitTypeId=" + encodeURIComponent("" + hospitalReceiveDocAdmitTypeId) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (searchType === null)
            throw new Error("The parameter 'searchType' cannot be null.");
        else if (searchType !== undefined)
            url_ += "SearchType=" + encodeURIComponent("" + searchType) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHospitalClaimTrackingDetail(_response);
        });
    }

    protected processGetHospitalClaimTrackingDetail(response: AxiosResponse): Promise<GetHospitalClaimTrackingDetailDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetHospitalClaimTrackingDetailDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetHospitalClaimTrackingDetailDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Header ใน HospitalClaimTracking
     * @param dateFrom (optional)
     * @param dateTo (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getHospitalClaimTrackingHeader(dateFrom?: dayjs.Dayjs | undefined, dateTo?: dayjs.Dayjs | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetHospitalClaimHeaderDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/claimtracking/HospitalClaimTracking/filter?";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHospitalClaimTrackingHeader(_response);
        });
    }

    protected processGetHospitalClaimTrackingHeader(response: AxiosResponse): Promise<GetHospitalClaimHeaderDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetHospitalClaimHeaderDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetHospitalClaimHeaderDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Scan เคลมโรงพยาบาล
     * @param body (optional)
     * @return Success
     */
    insertTmpHospitalClaimTracking(body?: InsertTmpHospitalClaimTrackingDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<InsertTmpHospitalClaimTrackingDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claimtracking/insert/tmphospitalclaimtracking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertTmpHospitalClaimTracking(_response);
        });
    }

    protected processInsertTmpHospitalClaimTracking(response: AxiosResponse): Promise<InsertTmpHospitalClaimTrackingDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<InsertTmpHospitalClaimTrackingDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InsertTmpHospitalClaimTrackingDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ ปุ่มบันทึก หน้าจอสแกนเอกสารเคลมโรงพยาบาล
     * @param body (optional)
     * @return Success
     */
    insertHospitalClaimTracking(body?: InsertHospitalClaimTrackingDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<InsertHospitalClaimTrackingDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claimtracking/insert/hospitalclaimtracking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertHospitalClaimTracking(_response);
        });
    }

    protected processInsertHospitalClaimTracking(response: AxiosResponse): Promise<InsertHospitalClaimTrackingDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<InsertHospitalClaimTrackingDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InsertHospitalClaimTrackingDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Delete Tmp หน้าจอสแกนเอกสารเคลมโรงพยาบาล
     * @param body (optional)
     * @return Success
     */
    deleteTmpHospitalClaimTracking(body?: DeleteTmpHospitalClaimTrackingDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<DeleteTmpHospitalClaimTranckingDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claimtracking/delete/tmphospitalclaimtracking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteTmpHospitalClaimTracking(_response);
        });
    }

    protected processDeleteTmpHospitalClaimTracking(response: AxiosResponse): Promise<DeleteTmpHospitalClaimTranckingDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<DeleteTmpHospitalClaimTranckingDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DeleteTmpHospitalClaimTranckingDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Update หน้าจอสแกนเอกสารเคลมโรงพยาบาล (แก้ไข Manual)
     * @param body (optional)
     * @return Success
     */
    updateHospitalClaimTrackingManual(body?: UpdateHospitalClaimTrackingManualDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<UpdateHospitalClaimTrackingManualDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/claimtracking/update/hospitalclaimtracking/manual";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateHospitalClaimTrackingManual(_response);
        });
    }

    protected processUpdateHospitalClaimTrackingManual(response: AxiosResponse): Promise<UpdateHospitalClaimTrackingManualDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<UpdateHospitalClaimTrackingManualDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateHospitalClaimTrackingManualDtoResponseServiceResponse>(null as any);
    }
}

export class MasterClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Get ข้อมูล Branch ด้วย BranchId
     * @param branchId (optional)
     * @return Success
     */
    getBranchByBranchId(branchId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<BranchDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/branch/filter?";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBranchByBranchId(_response);
        });
    }

    protected processGetBranchByBranchId(response: AxiosResponse): Promise<BranchDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<BranchDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BranchDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Service User ด้วย employeeCode
     * @return Success
     */
    getServiceUserByEmployeeCode(employeecode: string, cancelToken?: CancelToken | undefined): Promise<ServiceUserDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/servicebyuser/{employeecode}";
        if (employeecode === undefined || employeecode === null)
            throw new Error("The parameter 'employeecode' must be defined.");
        url_ = url_.replace("{employeecode}", encodeURIComponent("" + employeecode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetServiceUserByEmployeeCode(_response);
        });
    }

    protected processGetServiceUserByEmployeeCode(response: AxiosResponse): Promise<ServiceUserDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ServiceUserDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ServiceUserDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Employee Owner ZebraCar ด้วย EmployeeCode
     * @param userId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getEmployeeOwnerZebraCar(userId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<EmployeeOwnerZebraCarDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/ownerzebracar/filter?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetEmployeeOwnerZebraCar(_response);
        });
    }

    protected processGetEmployeeOwnerZebraCar(response: AxiosResponse): Promise<EmployeeOwnerZebraCarDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<EmployeeOwnerZebraCarDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EmployeeOwnerZebraCarDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Bank ทั้งหมด
     * @return Success
     */
    getBankAll( cancelToken?: CancelToken | undefined): Promise<BankAllDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/bank";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBankAll(_response);
        });
    }

    protected processGetBankAll(response: AxiosResponse): Promise<BankAllDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<BankAllDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BankAllDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล TransactionType
     * @return Success
     */
    getTransactionType( cancelToken?: CancelToken | undefined): Promise<TransactionTypeDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/transactiontype";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransactionType(_response);
        });
    }

    protected processGetTransactionType(response: AxiosResponse): Promise<TransactionTypeDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<TransactionTypeDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TransactionTypeDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimAdmitType ทั้งหมด
     * @param claimTypeId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimAdmitType(claimTypeId?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimAdmitTypeDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/claimadmittype/filter?";
        if (claimTypeId === null)
            throw new Error("The parameter 'claimTypeId' cannot be null.");
        else if (claimTypeId !== undefined)
            url_ += "ClaimTypeId=" + encodeURIComponent("" + claimTypeId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimAdmitType(_response);
        });
    }

    protected processGetClaimAdmitType(response: AxiosResponse): Promise<ClaimAdmitTypeDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimAdmitTypeDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimAdmitTypeDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimAdmitType ของ เคลมโรงพยาบาล
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimAdmitTypeClaimHospital(searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimAdmitTypeHospitalDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/claimadmittype/claimhospital/filter?";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimAdmitTypeClaimHospital(_response);
        });
    }

    protected processGetClaimAdmitTypeClaimHospital(response: AxiosResponse): Promise<ClaimAdmitTypeHospitalDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimAdmitTypeHospitalDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimAdmitTypeHospitalDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Provice ทั้งหมด
     * @return Success
     */
    getProviceAll( cancelToken?: CancelToken | undefined): Promise<ProviceAllDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/provice";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetProviceAll(_response);
        });
    }

    protected processGetProviceAll(response: AxiosResponse): Promise<ProviceAllDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ProviceAllDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProviceAllDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ContactPerson Type
     * @param productid (optional)
     * @return Success
     */
    getContactPersonType(productid?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ContactPersonTypeDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/contactpersontype?";
        if (productid === null)
            throw new Error("The parameter 'productid' cannot be null.");
        else if (productid !== undefined)
            url_ += "productid=" + encodeURIComponent("" + productid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetContactPersonType(_response);
        });
    }

    protected processGetContactPersonType(response: AxiosResponse): Promise<ContactPersonTypeDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ContactPersonTypeDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ContactPersonTypeDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Payment Status
     * @return Success
     */
    getPaymentStatus( cancelToken?: CancelToken | undefined): Promise<PaymentStatusDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/paymentstatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPaymentStatus(_response);
        });
    }

    protected processGetPaymentStatus(response: AxiosResponse): Promise<PaymentStatusDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<PaymentStatusDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentStatusDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล TransferCause
     * @return Success
     */
    getTransferCause( cancelToken?: CancelToken | undefined): Promise<TransferCauseDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/transfercause";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferCause(_response);
        });
    }

    protected processGetTransferCause(response: AxiosResponse): Promise<TransferCauseDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<TransferCauseDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TransferCauseDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล TransferType
     * @return Success
     */
    getTransferType( cancelToken?: CancelToken | undefined): Promise<TransferTypeDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/transfertype";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferType(_response);
        });
    }

    protected processGetTransferType(response: AxiosResponse): Promise<TransferTypeDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<TransferTypeDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TransferTypeDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundCause
     * @return Success
     */
    getRefundCause( cancelToken?: CancelToken | undefined): Promise<RefundCauseDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/refundcause";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundCause(_response);
        });
    }

    protected processGetRefundCause(response: AxiosResponse): Promise<RefundCauseDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundCauseDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundCauseDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundRejectCause
     * @return Success
     */
    getRefundRejectCause( cancelToken?: CancelToken | undefined): Promise<RefundRejectCauseDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/refundrejectcause";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundRejectCause(_response);
        });
    }

    protected processGetRefundRejectCause(response: AxiosResponse): Promise<RefundRejectCauseDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundRejectCauseDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundRejectCauseDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimOnLineAccount
     * @param claimOnLineAccountId (optional)
     * @param claimOnlineAccountTypeId (optional)
     * @return Success
     */
    getClaimOnLineAccount(claimOnLineAccountId?: number | undefined, claimOnlineAccountTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimOnLineAccountDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/claimonlineaccount?";
        if (claimOnLineAccountId === null)
            throw new Error("The parameter 'claimOnLineAccountId' cannot be null.");
        else if (claimOnLineAccountId !== undefined)
            url_ += "ClaimOnLineAccountId=" + encodeURIComponent("" + claimOnLineAccountId) + "&";
        if (claimOnlineAccountTypeId === null)
            throw new Error("The parameter 'claimOnlineAccountTypeId' cannot be null.");
        else if (claimOnlineAccountTypeId !== undefined)
            url_ += "ClaimOnlineAccountTypeId=" + encodeURIComponent("" + claimOnlineAccountTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnLineAccount(_response);
        });
    }

    protected processGetClaimOnLineAccount(response: AxiosResponse): Promise<ClaimOnLineAccountDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimOnLineAccountDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimOnLineAccountDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimOnLineCancelCa
     * @return Success
     */
    getCancelCause( cancelToken?: CancelToken | undefined): Promise<CancelCauseDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/cancelcause";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCancelCause(_response);
        });
    }

    protected processGetCancelCause(response: AxiosResponse): Promise<CancelCauseDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CancelCauseDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CancelCauseDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundStatus
     * @return Success
     */
    getRefundStatus( cancelToken?: CancelToken | undefined): Promise<RefundStatusDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/refund/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundStatus(_response);
        });
    }

    protected processGetRefundStatus(response: AxiosResponse): Promise<RefundStatusDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundStatusDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundStatusDtoResponseListServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    getNPLCause( cancelToken?: CancelToken | undefined): Promise<NPLCauseDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/nplcause";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetNPLCause(_response);
        });
    }

    protected processGetNPLCause(response: AxiosResponse): Promise<NPLCauseDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<NPLCauseDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NPLCauseDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimMistakeCause
     * @return Success
     */
    getClaimMistakeCause( cancelToken?: CancelToken | undefined): Promise<ClaimMistakeCauseDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/claimmistakecause";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimMistakeCause(_response);
        });
    }

    protected processGetClaimMistakeCause(response: AxiosResponse): Promise<ClaimMistakeCauseDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimMistakeCauseDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimMistakeCauseDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Hospital ทั้งหมด
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getHospitalDetailAll(searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<HospitalDetailAllDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/hospital/detail/filter?";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHospitalDetailAll(_response);
        });
    }

    protected processGetHospitalDetailAll(response: AxiosResponse): Promise<HospitalDetailAllDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<HospitalDetailAllDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HospitalDetailAllDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ReceiveDocType
     * @return Success
     */
    getReceiveDocType( cancelToken?: CancelToken | undefined): Promise<ReceiveDocTypeDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/master/receivedoctype";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetReceiveDocType(_response);
        });
    }

    protected processGetReceiveDocType(response: AxiosResponse): Promise<ReceiveDocTypeDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ReceiveDocTypeDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReceiveDocTypeDtoResponseListServiceResponse>(null as any);
    }
}

export class NPLClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ create NPL
     * @param body (optional)
     * @return Success
     */
    createNPL(body?: CreateNPLDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<CreateNPLDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/npl";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateNPL(_response);
        });
    }

    protected processCreateNPL(response: AxiosResponse): Promise<CreateNPLDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CreateNPLDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateNPLDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ get ข้อมูล NPL header
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @return Success
     */
    getNPLHeader(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<GetNPLHeaderDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/nplhead?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetNPLHeader(_response);
        });
    }

    protected processGetNPLHeader(response: AxiosResponse): Promise<GetNPLHeaderDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetNPLHeaderDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetNPLHeaderDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ get ข้อมูล NPL details
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getNPLDetails(claimOnLineId: string, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetNPLDetailsDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/npldetails/{claimOnLineId}?";
        if (claimOnLineId === undefined || claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' must be defined.");
        url_ = url_.replace("{claimOnLineId}", encodeURIComponent("" + claimOnLineId));
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetNPLDetails(_response);
        });
    }

    protected processGetNPLDetails(response: AxiosResponse): Promise<GetNPLDetailsDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetNPLDetailsDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetNPLDetailsDtoResponseListServiceResponse>(null as any);
    }
}

export class RefundClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Api สำหรับ บันทึกคืนเงิน
     * @param claimOnLineId (optional)
     * @param refundCauseId (optional)
     * @param transferTypeId (optional)
     * @param refundDate (optional)
     * @param customerName (optional)
     * @param remark (optional)
     * @param refundQueueDetails (optional)
     * @param file (optional)
     * @return Success
     */
    createRefundQueue(claimOnLineId?: string | undefined, refundCauseId?: number | undefined, transferTypeId?: number | undefined, refundDate?: dayjs.Dayjs | undefined, customerName?: string | undefined, remark?: string | undefined, refundQueueDetails?: string | undefined, file?: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<CreateRefundQueueDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/refund/refundqueue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (claimOnLineId === null || claimOnLineId === undefined)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else
            content_.append("ClaimOnLineId", claimOnLineId.toString());
        if (refundCauseId === null || refundCauseId === undefined)
            throw new Error("The parameter 'refundCauseId' cannot be null.");
        else
            content_.append("RefundCauseId", refundCauseId.toString());
        if (transferTypeId === null || transferTypeId === undefined)
            throw new Error("The parameter 'transferTypeId' cannot be null.");
        else
            content_.append("TransferTypeId", transferTypeId.toString());
        if (refundDate === null || refundDate === undefined)
            throw new Error("The parameter 'refundDate' cannot be null.");
        else
            content_.append("RefundDate", refundDate.toJSON());
        if (customerName === null || customerName === undefined)
            throw new Error("The parameter 'customerName' cannot be null.");
        else
            content_.append("CustomerName", customerName.toString());
        if (remark === null || remark === undefined)
            throw new Error("The parameter 'remark' cannot be null.");
        else
            content_.append("Remark", remark.toString());
        if (refundQueueDetails === null || refundQueueDetails === undefined)
            throw new Error("The parameter 'refundQueueDetails' cannot be null.");
        else
            content_.append("RefundQueueDetails", refundQueueDetails.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateRefundQueue(_response);
        });
    }

    protected processCreateRefundQueue(response: AxiosResponse): Promise<CreateRefundQueueDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<CreateRefundQueueDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateRefundQueueDtoResponseServiceResponse>(null as any);
    }

    /**
     * Api สำหรับ ยกเลิกการคืนเงิน
     * @param body (optional)
     * @return Success
     */
    refundCancel(body?: RefundCancelDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<RefundCancelDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/refund/cancel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefundCancel(_response);
        });
    }

    protected processRefundCancel(response: AxiosResponse): Promise<RefundCancelDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundCancelDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundCancelDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ อนุมัติการคืนเงิน
     * @return Success
     */
    refundApprove(refundQueueId: string, cancelToken?: CancelToken | undefined): Promise<RefundApproveDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/refund/approve/{refundQueueId}";
        if (refundQueueId === undefined || refundQueueId === null)
            throw new Error("The parameter 'refundQueueId' must be defined.");
        url_ = url_.replace("{refundQueueId}", encodeURIComponent("" + refundQueueId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefundApprove(_response);
        });
    }

    protected processRefundApprove(response: AxiosResponse): Promise<RefundApproveDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundApproveDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundApproveDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ ปฏิเสทโอนคืน
     * @param body (optional)
     * @return Success
     */
    refundUnApprove(refundQueueId: string, body?: RefundUnApproveDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<RefundUnApproveDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/refund/unapprove/{refundQueueId}";
        if (refundQueueId === undefined || refundQueueId === null)
            throw new Error("The parameter 'refundQueueId' must be defined.");
        url_ = url_.replace("{refundQueueId}", encodeURIComponent("" + refundQueueId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRefundUnApprove(_response);
        });
    }

    protected processRefundUnApprove(response: AxiosResponse): Promise<RefundUnApproveDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundUnApproveDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundUnApproveDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ประวัติการคืนเงิน
     * @param branchId (optional)
     * @param refundStatusId (optional)
     * @param claimOnLineCode (optional)
     * @param dateFrom (optional)
     * @param dateTo (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getRefundQueue(branchId?: number | undefined, refundStatusId?: number | undefined, claimOnLineCode?: string | undefined, dateFrom?: dayjs.Dayjs | undefined, dateTo?: dayjs.Dayjs | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<RefundQueueDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/refund/refundqueue/filter?";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (refundStatusId === null)
            throw new Error("The parameter 'refundStatusId' cannot be null.");
        else if (refundStatusId !== undefined)
            url_ += "RefundStatusId=" + encodeURIComponent("" + refundStatusId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (dateFrom === null)
            throw new Error("The parameter 'dateFrom' cannot be null.");
        else if (dateFrom !== undefined)
            url_ += "DateFrom=" + encodeURIComponent(dateFrom ? "" + dateFrom.toISOString() : "") + "&";
        if (dateTo === null)
            throw new Error("The parameter 'dateTo' cannot be null.");
        else if (dateTo !== undefined)
            url_ += "DateTo=" + encodeURIComponent(dateTo ? "" + dateTo.toISOString() : "") + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundQueue(_response);
        });
    }

    protected processGetRefundQueue(response: AxiosResponse): Promise<RefundQueueDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundQueueDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundQueueDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundHeader ของหน้า อนุมัติคืนเงิน
     * @return Success
     */
    getRefundHeaderByRefundQueueId(refundQueueId: string, cancelToken?: CancelToken | undefined): Promise<GetRefundHeaderByRefundQueueIdDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/refund/refundheader/{refundQueueId}";
        if (refundQueueId === undefined || refundQueueId === null)
            throw new Error("The parameter 'refundQueueId' must be defined.");
        url_ = url_.replace("{refundQueueId}", encodeURIComponent("" + refundQueueId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundHeaderByRefundQueueId(_response);
        });
    }

    protected processGetRefundHeaderByRefundQueueId(response: AxiosResponse): Promise<GetRefundHeaderByRefundQueueIdDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetRefundHeaderByRefundQueueIdDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRefundHeaderByRefundQueueIdDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundDetail ของหน้า อนุมัติคืนเงิน
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getRefundDetailByRefundQueueId(refundQueueId: string, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetRefundDetailByRefundQueueIdDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/refund/refunddetail/{refundQueueId}?";
        if (refundQueueId === undefined || refundQueueId === null)
            throw new Error("The parameter 'refundQueueId' must be defined.");
        url_ = url_.replace("{refundQueueId}", encodeURIComponent("" + refundQueueId));
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundDetailByRefundQueueId(_response);
        });
    }

    protected processGetRefundDetailByRefundQueueId(response: AxiosResponse): Promise<GetRefundDetailByRefundQueueIdDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetRefundDetailByRefundQueueIdDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRefundDetailByRefundQueueIdDtoResponseListServiceResponse>(null as any);
    }
}

export class ReportClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Get ข้อมูล ClaimPayTransaction ประจำวัน ผ่าน Stored Procedure จาก PaymentDate : To Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/transaction/daily/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile(_response);
        });
    }

    protected processFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimPayTransaction ผ่าน Stored Procedure จาก PaymentDate : To Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file2(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/transaction/claim/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile2(_response);
        });
    }

    protected processFile2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ ดาวน์โหลดไฟล์ รายงาน NPL
     * @param body (optional)
     * @return Success
     */
    downloadReportNPL(body?: DownloadReportNPLDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/npl/file";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadReportNPL(_response);
        });
    }

    protected processDownloadReportNPL(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ ดาวน์โหลดไฟล์ รายงานผลต่างการรับชำระ
     * @param body (optional)
     * @return Success
     */
    downloadReportDifferentPayment(body?: ReportDifferentPaymentDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/differentpayment/file";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadReportDifferentPayment(_response);
        });
    }

    protected processDownloadReportDifferentPayment(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ ดาวน์โหลดไฟล์ รายงานเคลมคงค้าง
     * @return Success
     */
    downloadReportClaimOnLineRemain( cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/claimonlineremain/file";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDownloadReportClaimOnLineRemain(_response);
        });
    }

    protected processDownloadReportClaimOnLineRemain(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล CustomerBankAccount ผ่าน Stored Procedure to Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file3(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/bankaccount/customer/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile3(_response);
        });
    }

    protected processFile3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Transfer (โอนเพิ่ม) ผ่าน Stored Procedure to Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file4(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/transfer/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile4(_response);
        });
    }

    protected processFile4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Refund ผ่าน Stored Procedure to Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file5(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/refund/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile5(_response);
        });
    }

    protected processFile5(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Compensate ผ่าน Stored Procedure to Excel
     * @param period (optional)
     * @return Success
     */
    file6(period?: dayjs.Dayjs | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/compensate/file?";
        if (period === null)
            throw new Error("The parameter 'period' cannot be null.");
        else if (period !== undefined)
            url_ += "Period=" + encodeURIComponent(period ? "" + period.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile6(_response);
        });
    }

    protected processFile6(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimOnLineCancel ผ่าน Stored Procedure to Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file7(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/cancel/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile7(_response);
        });
    }

    protected processFile7(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล GetClaimOnlineOverLimit (เคลมที่เกินวงเงิน) ผ่าน Stored Procedure to Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file8(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/claimoverlimit/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile8(_response);
        });
    }

    protected processFile8(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล GetClaimRecieveItem (ตัดรับชำระ) ผ่าน Stored Procedure to Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file9(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/claimrecieveitem/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile9(_response);
        });
    }

    protected processFile9(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล GetHospitalClaimTracking (เอกสารโรงพยาบาล) ผ่าน Stored Procedure to Excel
     * @param userId (optional)
     * @param branchId (optional)
     * @param transferDateFrom (optional)
     * @param transferDateTo (optional)
     * @param dataSearchTypeId (optional)
     * @return Success
     */
    file10(userId?: number | undefined, branchId?: number | undefined, transferDateFrom?: dayjs.Dayjs | undefined, transferDateTo?: dayjs.Dayjs | undefined, dataSearchTypeId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/report/hospitalClaimTracking/file?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (transferDateFrom === null)
            throw new Error("The parameter 'transferDateFrom' cannot be null.");
        else if (transferDateFrom !== undefined)
            url_ += "TransferDateFrom=" + encodeURIComponent(transferDateFrom ? "" + transferDateFrom.toISOString() : "") + "&";
        if (transferDateTo === null)
            throw new Error("The parameter 'transferDateTo' cannot be null.");
        else if (transferDateTo !== undefined)
            url_ += "TransferDateTo=" + encodeURIComponent(transferDateTo ? "" + transferDateTo.toISOString() : "") + "&";
        if (dataSearchTypeId === null)
            throw new Error("The parameter 'dataSearchTypeId' cannot be null.");
        else if (dataSearchTypeId !== undefined)
            url_ += "DataSearchTypeId=" + encodeURIComponent("" + dataSearchTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFile10(_response);
        });
    }

    protected processFile10(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class SearchClaimOnLineClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Search ข้อมูล ClaimOnLine
     * @param userId (optional)
     * @param branchId (optional)
     * @param year (optional)
     * @param provinceId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimOnLine(searchType: number, productTypeId: number, userId?: number | undefined, branchId?: number | undefined, year?: number | undefined, provinceId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimOnLineDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/claimonline/filter?";
        if (searchType === undefined || searchType === null)
            throw new Error("The parameter 'searchType' must be defined and cannot be null.");
        else
            url_ += "SearchType=" + encodeURIComponent("" + searchType) + "&";
        if (productTypeId === undefined || productTypeId === null)
            throw new Error("The parameter 'productTypeId' must be defined and cannot be null.");
        else
            url_ += "ProductTypeId=" + encodeURIComponent("" + productTypeId) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (provinceId === null)
            throw new Error("The parameter 'provinceId' cannot be null.");
        else if (provinceId !== undefined)
            url_ += "ProvinceId=" + encodeURIComponent("" + provinceId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnLine(_response);
        });
    }

    protected processGetClaimOnLine(response: AxiosResponse): Promise<ClaimOnLineDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimOnLineDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimOnLineDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimOnLineItem
     * @param claimonlineid (optional)
     * @param claimonlinecode (optional)
     * @return Success
     */
    getClaimOnLineItem(claimonlineid?: string | undefined, claimonlinecode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimOnLineItemDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/search/claimonlineitem?";
        if (claimonlineid === null)
            throw new Error("The parameter 'claimonlineid' cannot be null.");
        else if (claimonlineid !== undefined)
            url_ += "claimonlineid=" + encodeURIComponent("" + claimonlineid) + "&";
        if (claimonlinecode === null)
            throw new Error("The parameter 'claimonlinecode' cannot be null.");
        else if (claimonlinecode !== undefined)
            url_ += "claimonlinecode=" + encodeURIComponent("" + claimonlinecode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnLineItem(_response);
        });
    }

    protected processGetClaimOnLineItem(response: AxiosResponse): Promise<ClaimOnLineItemDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimOnLineItemDtoResponseServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimOnLineItemDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล Claim ใน ClaimOnLine
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param productTypeId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimOnLineByClaim(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, productTypeId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimOnLineByClaimHeaderDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/claimonline/claim/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (productTypeId === null)
            throw new Error("The parameter 'productTypeId' cannot be null.");
        else if (productTypeId !== undefined)
            url_ += "ProductTypeId=" + encodeURIComponent("" + productTypeId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnLineByClaim(_response);
        });
    }

    protected processGetClaimOnLineByClaim(response: AxiosResponse): Promise<ClaimOnLineByClaimHeaderDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimOnLineByClaimHeaderDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimOnLineByClaimHeaderDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายละเอียด Claim ใน ClaimOnLine
     * @param claimonlineitemid (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimOnLineByClaimDetail(claimonlineitemid?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimOnLineByClaimHeaderDetailDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/claimonline/claim/detail/filter?";
        if (claimonlineitemid === null)
            throw new Error("The parameter 'claimonlineitemid' cannot be null.");
        else if (claimonlineitemid !== undefined)
            url_ += "claimonlineitemid=" + encodeURIComponent("" + claimonlineitemid) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnLineByClaimDetail(_response);
        });
    }

    protected processGetClaimOnLineByClaimDetail(response: AxiosResponse): Promise<ClaimOnLineByClaimHeaderDetailDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimOnLineByClaimHeaderDetailDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimOnLineByClaimHeaderDetailDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ประวัติการทำรายการ
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param productTypeId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimOnLineHistoryTransaction(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, productTypeId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimOnLineTransactionDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/history/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (productTypeId === null)
            throw new Error("The parameter 'productTypeId' cannot be null.");
        else if (productTypeId !== undefined)
            url_ += "ProductTypeId=" + encodeURIComponent("" + productTypeId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimOnLineHistoryTransaction(_response);
        });
    }

    protected processGetClaimOnLineHistoryTransaction(response: AxiosResponse): Promise<ClaimOnLineTransactionDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimOnLineTransactionDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimOnLineTransactionDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ประวัติการโอนเงิน
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param productTypeId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimPayGroup(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, productTypeId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPayGroupDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/claimpaygroup/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (productTypeId === null)
            throw new Error("The parameter 'productTypeId' cannot be null.");
        else if (productTypeId !== undefined)
            url_ += "ProductTypeId=" + encodeURIComponent("" + productTypeId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPayGroup(_response);
        });
    }

    protected processGetClaimPayGroup(response: AxiosResponse): Promise<ClaimPayGroupDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayGroupDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayGroupDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ประวัติการคืนเงิน หน้าค้นหาเคลม และหน้าโอนเพิ่ม
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimRefundQueue(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetRefundQueueClaimDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/refundqueue-claim/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimRefundQueue(_response);
        });
    }

    protected processGetClaimRefundQueue(response: AxiosResponse): Promise<GetRefundQueueClaimDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetRefundQueueClaimDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRefundQueueClaimDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ประวัติการจ่ายเงินจากกองทุน
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getFundPayment(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<FundPaymentDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/fundpayment/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFundPayment(_response);
        });
    }

    protected processGetFundPayment(response: AxiosResponse): Promise<FundPaymentDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<FundPaymentDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FundPaymentDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ประวัติการรับเงินจากกองทุน
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getFundReceive(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<FundReceiveDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/fundreceive/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFundReceive(_response);
        });
    }

    protected processGetFundReceive(response: AxiosResponse): Promise<FundReceiveDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<FundReceiveDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FundReceiveDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ประวัติการคืนเงินเงินจากกองทุน
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getFundRefund(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<FundRefundDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/fundrefund/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFundRefund(_response);
        });
    }

    protected processGetFundRefund(response: AxiosResponse): Promise<FundRefundDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<FundRefundDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FundRefundDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายละเอียด ประวัติการโอนเงิน ClaimPayTransaction
     * @return Success
     */
    getClaimPayTransaction(claimpaygroupid: string, cancelToken?: CancelToken | undefined): Promise<ClaimPayTransactionDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/{claimpaygroupid}/claimpay-transaction";
        if (claimpaygroupid === undefined || claimpaygroupid === null)
            throw new Error("The parameter 'claimpaygroupid' must be defined.");
        url_ = url_.replace("{claimpaygroupid}", encodeURIComponent("" + claimpaygroupid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPayTransaction(_response);
        });
    }

    protected processGetClaimPayTransaction(response: AxiosResponse): Promise<ClaimPayTransactionDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayTransactionDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayTransactionDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายละเอียด CPG จาก ClaimPayGroup
     * @param claimpaygroupcode (optional)
     * @return Success
     */
    getClaimPayGroupDetail(claimpaygroupcode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPayGroupDetailDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/search/claimpaygroupdetail?";
        if (claimpaygroupcode === null)
            throw new Error("The parameter 'claimpaygroupcode' cannot be null.");
        else if (claimpaygroupcode !== undefined)
            url_ += "claimpaygroupcode=" + encodeURIComponent("" + claimpaygroupcode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPayGroupDetail(_response);
        });
    }

    protected processGetClaimPayGroupDetail(response: AxiosResponse): Promise<ClaimPayGroupDetailDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayGroupDetailDtoResponseServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayGroupDetailDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายละเอียด CRG จาก ClaimReceiveGroup
     * @param claimreceivegroupId (optional)
     * @param claimreceivegroupcode (optional)
     * @return Success
     */
    getClaimReceiveGroupDetail(claimreceivegroupId?: string | undefined, claimreceivegroupcode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimReceiveGroupDetailDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/search/claimreceivegroupdetail?";
        if (claimreceivegroupId === null)
            throw new Error("The parameter 'claimreceivegroupId' cannot be null.");
        else if (claimreceivegroupId !== undefined)
            url_ += "claimreceivegroupId=" + encodeURIComponent("" + claimreceivegroupId) + "&";
        if (claimreceivegroupcode === null)
            throw new Error("The parameter 'claimreceivegroupcode' cannot be null.");
        else if (claimreceivegroupcode !== undefined)
            url_ += "claimreceivegroupcode=" + encodeURIComponent("" + claimreceivegroupcode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimReceiveGroupDetail(_response);
        });
    }

    protected processGetClaimReceiveGroupDetail(response: AxiosResponse): Promise<ClaimReceiveGroupDetailDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimReceiveGroupDetailDtoResponseServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimReceiveGroupDetailDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimPayItem By ClaimPayGroupCode
     * @param claimPayGroupCode (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimPayItemByClaimPayGroup(claimPayGroupCode?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimPayItemDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/claimpayitembycpg/filter?";
        if (claimPayGroupCode === null)
            throw new Error("The parameter 'claimPayGroupCode' cannot be null.");
        else if (claimPayGroupCode !== undefined)
            url_ += "ClaimPayGroupCode=" + encodeURIComponent("" + claimPayGroupCode) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimPayItemByClaimPayGroup(_response);
        });
    }

    protected processGetClaimPayItemByClaimPayGroup(response: AxiosResponse): Promise<ClaimPayItemDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimPayItemDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimPayItemDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimReceiveItem By ClaimReceiveGroupCode
     * @param claimReceiveGroupId (optional)
     * @param claimReceiveGroupCode (optional)
     * @param claimOnlineId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getClaimReceiveItemByClaimReceiveGroup(claimReceiveGroupId?: string | undefined, claimReceiveGroupCode?: string | undefined, claimOnlineId?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<ClaimReceiveItemByCRGDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/claimreceiveitembycrg/filter?";
        if (claimReceiveGroupId === null)
            throw new Error("The parameter 'claimReceiveGroupId' cannot be null.");
        else if (claimReceiveGroupId !== undefined)
            url_ += "ClaimReceiveGroupId=" + encodeURIComponent("" + claimReceiveGroupId) + "&";
        if (claimReceiveGroupCode === null)
            throw new Error("The parameter 'claimReceiveGroupCode' cannot be null.");
        else if (claimReceiveGroupCode !== undefined)
            url_ += "ClaimReceiveGroupCode=" + encodeURIComponent("" + claimReceiveGroupCode) + "&";
        if (claimOnlineId === null)
            throw new Error("The parameter 'claimOnlineId' cannot be null.");
        else if (claimOnlineId !== undefined)
            url_ += "ClaimOnlineId=" + encodeURIComponent("" + claimOnlineId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimReceiveItemByClaimReceiveGroup(_response);
        });
    }

    protected processGetClaimReceiveItemByClaimReceiveGroup(response: AxiosResponse): Promise<ClaimReceiveItemByCRGDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ClaimReceiveItemByCRGDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ClaimReceiveItemByCRGDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundQueue Detail
     * @param refundQueueId (optional)
     * @return Success
     */
    getRefundQueueDetail(refundQueueId?: string | undefined, cancelToken?: CancelToken | undefined): Promise<RefundQueueDetailDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/search/refundqueuedetail?";
        if (refundQueueId === null)
            throw new Error("The parameter 'refundQueueId' cannot be null.");
        else if (refundQueueId !== undefined)
            url_ += "refundQueueId=" + encodeURIComponent("" + refundQueueId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundQueueDetail(_response);
        });
    }

    protected processGetRefundQueueDetail(response: AxiosResponse): Promise<RefundQueueDetailDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<RefundQueueDetailDtoResponseServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RefundQueueDetailDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundQueueItem
     * @param refundQueueId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getRefundQueueItem(refundQueueId?: string | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<GetRefundQueueItemDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/refundqueueitem/filter?";
        if (refundQueueId === null)
            throw new Error("The parameter 'refundQueueId' cannot be null.");
        else if (refundQueueId !== undefined)
            url_ += "RefundQueueId=" + encodeURIComponent("" + refundQueueId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundQueueItem(_response);
        });
    }

    protected processGetRefundQueueItem(response: AxiosResponse): Promise<GetRefundQueueItemDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetRefundQueueItemDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRefundQueueItemDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล RefundQueueTransaction
     * @return Success
     */
    getRefundQueueTransaction(refundQueueId: string, cancelToken?: CancelToken | undefined): Promise<GetRefundQueueTransactionDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/{refundQueueId}/refundqueue-transaction";
        if (refundQueueId === undefined || refundQueueId === null)
            throw new Error("The parameter 'refundQueueId' must be defined.");
        url_ = url_.replace("{refundQueueId}", encodeURIComponent("" + refundQueueId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRefundQueueTransaction(_response);
        });
    }

    protected processGetRefundQueueTransaction(response: AxiosResponse): Promise<GetRefundQueueTransactionDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetRefundQueueTransactionDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRefundQueueTransactionDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล ClaimAdmitTypeTransaction
     * @return Success
     */
    getClaimAdmitTypeTransaction(claimOnlineTransactionId: string, cancelToken?: CancelToken | undefined): Promise<GetClaimAdmitTypeTransactionDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/search/{claimOnlineTransactionId}/claimadmittype-transaction";
        if (claimOnlineTransactionId === undefined || claimOnlineTransactionId === null)
            throw new Error("The parameter 'claimOnlineTransactionId' must be defined.");
        url_ = url_.replace("{claimOnlineTransactionId}", encodeURIComponent("" + claimOnlineTransactionId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetClaimAdmitTypeTransaction(_response);
        });
    }

    protected processGetClaimAdmitTypeTransaction(response: AxiosResponse): Promise<GetClaimAdmitTypeTransactionDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetClaimAdmitTypeTransactionDtoResponseListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetClaimAdmitTypeTransactionDtoResponseListServiceResponse>(null as any);
    }
}

export class SwitchOvertimePayClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Update IsAutoMode
     * @param userId (optional)
     * @return Success
     */
    updateIsAutoMode(turn: boolean, userId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<IsResultSwitchDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/switch/update/{turn}/automode?";
        if (turn === undefined || turn === null)
            throw new Error("The parameter 'turn' must be defined.");
        url_ = url_.replace("{turn}", encodeURIComponent("" + turn));
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateIsAutoMode(_response);
        });
    }

    protected processUpdateIsAutoMode(response: AxiosResponse): Promise<IsResultSwitchDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<IsResultSwitchDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IsResultSwitchDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Insert Overtime Pay Transaction
     * @return Success
     */
    insertOvertimePayTransaction( cancelToken?: CancelToken | undefined): Promise<IsResultSwitchDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/switch/insert/overtimepay";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertOvertimePayTransaction(_response);
        });
    }

    protected processInsertOvertimePayTransaction(response: AxiosResponse): Promise<IsResultSwitchDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<IsResultSwitchDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IsResultSwitchDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล OverTimePay จาก ProgramConfig
     * @return Success
     */
    getOverTimePay( cancelToken?: CancelToken | undefined): Promise<OverTimePayDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/switch/overtimepay";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOverTimePay(_response);
        });
    }

    protected processGetOverTimePay(response: AxiosResponse): Promise<OverTimePayDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OverTimePayDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OverTimePayDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล OverTimePay จาก OvertimePayLog
     * @return Success
     */
    getOverTimePayLog( cancelToken?: CancelToken | undefined): Promise<OverTimePayLogDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/switch/overtimepaylog";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOverTimePayLog(_response);
        });
    }

    protected processGetOverTimePayLog(response: AxiosResponse): Promise<OverTimePayLogDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<OverTimePayLogDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OverTimePayLogDtoResponseListServiceResponse>(null as any);
    }
}

export class TransferClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Get ข้อมูล ตาราง โอนเพิ่ม
     * @param userId (optional)
     * @param branchId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getTransferMonitor(userId?: number | undefined, branchId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<TransferMonitorDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/transfer/filter?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferMonitor(_response);
        });
    }

    protected processGetTransferMonitor(response: AxiosResponse): Promise<TransferMonitorDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<TransferMonitorDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TransferMonitorDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Validate ClaimOnLineCode
     * @return Success
     */
    validateTransferSearch(claimonlinecode: string, cancelToken?: CancelToken | undefined): Promise<ValidateTransferSearchDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/transfer/{claimonlinecode}";
        if (claimonlinecode === undefined || claimonlinecode === null)
            throw new Error("The parameter 'claimonlinecode' must be defined.");
        url_ = url_.replace("{claimonlinecode}", encodeURIComponent("" + claimonlinecode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateTransferSearch(_response);
        });
    }

    protected processValidateTransferSearch(response: AxiosResponse): Promise<ValidateTransferSearchDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<ValidateTransferSearchDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValidateTransferSearchDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมููล Claim สำหรับ บันทึกโอนเพิ่ม
     * @return Success
     */
    getTransferDetail(claimonlinecode: string, cancelToken?: CancelToken | undefined): Promise<TransferDetailDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/transfer/{claimonlinecode}/detail";
        if (claimonlinecode === undefined || claimonlinecode === null)
            throw new Error("The parameter 'claimonlinecode' must be defined.");
        url_ = url_.replace("{claimonlinecode}", encodeURIComponent("" + claimonlinecode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferDetail(_response);
        });
    }

    protected processGetTransferDetail(response: AxiosResponse): Promise<TransferDetailDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<TransferDetailDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TransferDetailDtoResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Get ข้อมูล รายการ โอนเพิ่ม
     * @param claimOnLineId (optional)
     * @param claimOnLineCode (optional)
     * @param productTypeId (optional)
     * @param searchDetail (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    getTransferList(claimOnLineId?: string | undefined, claimOnLineCode?: string | undefined, productTypeId?: number | undefined, searchDetail?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<TransferListDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/transfer/list/filter?";
        if (claimOnLineId === null)
            throw new Error("The parameter 'claimOnLineId' cannot be null.");
        else if (claimOnLineId !== undefined)
            url_ += "ClaimOnLineId=" + encodeURIComponent("" + claimOnLineId) + "&";
        if (claimOnLineCode === null)
            throw new Error("The parameter 'claimOnLineCode' cannot be null.");
        else if (claimOnLineCode !== undefined)
            url_ += "ClaimOnLineCode=" + encodeURIComponent("" + claimOnLineCode) + "&";
        if (productTypeId === null)
            throw new Error("The parameter 'productTypeId' cannot be null.");
        else if (productTypeId !== undefined)
            url_ += "ProductTypeId=" + encodeURIComponent("" + productTypeId) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransferList(_response);
        });
    }

    protected processGetTransferList(response: AxiosResponse): Promise<TransferListDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<TransferListDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TransferListDtoResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Insert Transfer
     * @param body (optional)
     * @return Success
     */
    insertTransfer(body?: InsertTransferDtoRequest | undefined, cancelToken?: CancelToken | undefined): Promise<InsertTransferDtoResponseServiceResponse> {
        let url_ = this.baseUrl + "/transfer/insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInsertTransfer(_response);
        });
    }

    protected processInsertTransfer(response: AxiosResponse): Promise<InsertTransferDtoResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<InsertTransferDtoResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InsertTransferDtoResponseServiceResponse>(null as any);
    }
}

export interface AccountBalanceDtoRequest {
    bankId?: number;
    accountNo?: string | undefined;
    accountName?: string | undefined;
    balance?: number | undefined;
}

export interface AccountBalanceDtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface AccountBalanceDtoResponseServiceResponse {
    data?: AccountBalanceDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface BankAllDtoResponse {
    bankId?: number;
    bankCode?: string | undefined;
    bankDetail?: string | undefined;
    shortName?: string | undefined;
    abbreviation?: string | undefined;
}

export interface BankAllDtoResponseListServiceResponse {
    data?: BankAllDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface BaseResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface BaseResponseServiceResponse {
    data?: BaseResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface BranchDtoResponse {
    branchId?: number;
    branch?: string | undefined;
    branchCode?: string | undefined;
    totalCount?: number | undefined;
}

export interface BranchDtoResponseListServiceResponse {
    data?: BranchDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CancelCauseDtoResponse {
    cancelCauseId?: number;
    cancelCause1?: string | undefined;
}

export interface CancelCauseDtoResponseListServiceResponse {
    data?: CancelCauseDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimAdmitTypeDtoResponse {
    code?: string | undefined;
    detail?: string | undefined;
    buI_ClaimType?: string | undefined;
    buI_IPDOPD?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimAdmitTypeDtoResponseListServiceResponse {
    data?: ClaimAdmitTypeDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimAdmitTypeEditDtoRequest {
    claimOnLineId: string;
    claimOnLineItemId: string;
    fromClaimAdmitTypeCode: string;
    fromClaimAdmitTypeDetail: string;
    toClaimAdmitTypeCode: string;
    toClaimAdmitTypeDetail: string;
    requestByUserId: number;
}

export interface ClaimAdmitTypeEditDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface ClaimAdmitTypeEditDtoResponseServiceResponse {
    data?: ClaimAdmitTypeEditDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimAdmitTypeHospitalDtoResponse {
    claimAdmitTypeCode?: number;
    claimAdmitTypeDetail?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimAdmitTypeHospitalDtoResponseListServiceResponse {
    data?: ClaimAdmitTypeHospitalDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimAdmitTypePADtoResponse {
    claimType_id?: string | undefined;
    claimType?: string | undefined;
    productCategory_id?: string | undefined;
    productCategory?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimAdmitTypePADtoResponseListServiceResponse {
    data?: ClaimAdmitTypePADtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimMistakeCause {
    claimMisTakeCauseId?: number;
    claimMisTakeCause1?: string | undefined;
    isActive?: boolean | undefined;
    createByUserId?: number | undefined;
    createDate?: dayjs.Dayjs | undefined;
    updateByUserId?: number | undefined;
    updateDate?: dayjs.Dayjs | undefined;
    claimMistakeTransactions?: ClaimMistakeTransaction[] | undefined;
}

export interface ClaimMistakeCauseDtoResponse {
    claimMisTakeCauseId?: number;
    claimMisTakeCause1?: string | undefined;
    isActive?: boolean | undefined;
    createByUserId?: number | undefined;
    createDate?: dayjs.Dayjs | undefined;
    updateByUserId?: number | undefined;
    updateDate?: dayjs.Dayjs | undefined;
    claimMistakeTransactions?: ClaimMistakeTransaction[] | undefined;
}

export interface ClaimMistakeCauseDtoResponseListServiceResponse {
    data?: ClaimMistakeCauseDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimMistakeDtoRequest {
    claimOnLineIdFrom: string;
    applicationCode: string;
    customerName: string;
    claimMistakeCauseId: number;
    remark?: string | undefined;
}

export interface ClaimMistakeTransaction {
    claimMistakeTransactionId?: string;
    claimOnLineIdFrom?: string | undefined;
    /** Gen ReferenceCode 'OLYYXXXX' */
    claimOnLineCodeFrom?: string | undefined;
    claimOnLineIdTo?: string | undefined;
    /** Gen ReferenceCode 'OLYYXXXX' */
    claimOnLineCodeTo?: string | undefined;
    claimMistakeCauseId?: number | undefined;
    remark?: string | undefined;
    isActive?: boolean | undefined;
    createdByUserId?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    updatedByUserId?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
    claimMistakeCause?: ClaimMistakeCause;
}

export interface ClaimOnLineAccountDtoResponse {
    claimOnLineAccountId?: number | undefined;
    bankId?: number | undefined;
    accountNo?: string | undefined;
    accountName?: string | undefined;
    priority?: number | undefined;
    claimOnlineAccountTypeId?: number | undefined;
}

export interface ClaimOnLineAccountDtoResponseListServiceResponse {
    data?: ClaimOnLineAccountDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimOnLineByClaimHeaderDetailDtoResponse {
    claimPayItemCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    amount?: number | undefined;
    claimPayGroupCode?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimOnLineByClaimHeaderDetailDtoResponseListServiceResponse {
    data?: ClaimOnLineByClaimHeaderDetailDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimOnLineByClaimHeaderDtoResponse {
    claimOnLineId?: string;
    claimOnLineItemId?: string | undefined;
    applicationCode?: string | undefined;
    claimHeaderCode?: string | undefined;
    claimAdmitTypeCode?: string | undefined;
    claimAdmitType?: string | undefined;
    dateHappen?: dayjs.Dayjs | undefined;
    productCategoryCode?: string | undefined;
    dateIn?: dayjs.Dayjs | undefined;
    dateOut?: dayjs.Dayjs | undefined;
    claimRemark?: string | undefined;
    customerName?: string | undefined;
    amount?: number | undefined;
    z_CardId?: string | undefined;
    documentId?: string | undefined;
    insuranceCompanyCode?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimOnLineByClaimHeaderDtoResponseListServiceResponse {
    data?: ClaimOnLineByClaimHeaderDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimOnLineDtoResponse {
    claimOnLineId?: string;
    claimOnLineCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    zCard_id?: string | undefined;
    payeeAccountName?: string | undefined;
    payeeAccountNo?: string | undefined;
    schoolName?: string | undefined;
    claimAmount?: number | undefined;
    claimOnLineStatusId?: number | undefined;
    claimOnLineStatusName?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimOnLineDtoResponseListServiceResponse {
    data?: ClaimOnLineDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimOnLineItemDtoResponse {
    claimOnLineCode?: string | undefined;
    applicationCode?: string | undefined;
    schoolName?: string | undefined;
    contactName?: string | undefined;
    claimAdmitType?: string | undefined;
    claimAdmitTypeCode?: string | undefined;
    dateHappen?: dayjs.Dayjs | undefined;
    dateIn?: dayjs.Dayjs | undefined;
    dateOut?: dayjs.Dayjs | undefined;
    claimRemark?: string | undefined;
    contactPersonPhoneNo?: string | undefined;
    serviceByUserId?: number | undefined;
    serviceByUserName?: string | undefined;
    zebraCarOwnerByUserId?: number | undefined;
    zebraCarOwnerName?: string | undefined;
    claimOnLineStatusId?: number | undefined;
    claimOnLineStatusName?: string | undefined;
    cancelCause?: string | undefined;
    cancelRemark?: string | undefined;
    bankAccount?: string | undefined;
    branchDetail?: string | undefined;
    createdByUserId?: number | undefined;
    receiveDocTypeName?: string | undefined;
    insuranceCompanyCode?: string | undefined;
}

export interface ClaimOnLineItemDtoResponseServiceResponse {
    data?: ClaimOnLineItemDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimOnLineMonitorDtoResponse {
    claimOnLineId?: string;
    claimOnLineCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    branchId?: number | undefined;
    branchDetail?: string | undefined;
    paymentAmount?: number | undefined;
    paymentStatusId?: number | undefined;
    paymentStatusName?: string | undefined;
    bankDescription?: string | undefined;
    productTypeId?: number | undefined;
    claimPayGroupId?: string;
    premiumSourceStatusId?: number | undefined;
    insuranceCompanyCode?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimOnLineMonitorDtoResponseListServiceResponse {
    data?: ClaimOnLineMonitorDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimOnLineTransactionDtoResponse {
    claimOnlineTransactionId?: string;
    claimOnlineTransactionCode?: string | undefined;
    transactionTypeId?: number | undefined;
    transactionTypeName?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    createdByName?: string | undefined;
    paymentAmount?: number | undefined;
    transferByProcess?: string | undefined;
    detail?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimOnLineTransactionDtoResponseListServiceResponse {
    data?: ClaimOnLineTransactionDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayForInquiryDtoResponse {
    claimOnLineId?: string | undefined;
    claimOnLineCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    paymentStatusId?: number | undefined;
    paymentStatusName?: string | undefined;
    claimPayGroupId?: string;
    toBankId?: number | undefined;
    toBankName?: string | undefined;
    toAccountNo?: string | undefined;
    toAccountName?: string | undefined;
    paymentAmount?: number | undefined;
    paymentTypeId?: number | undefined;
    createdByUserId?: number | undefined;
    claimPayTransactionId?: string;
    totalCount?: number | undefined;
}

export interface ClaimPayForInquiryDtoResponseListServiceResponse {
    data?: ClaimPayForInquiryDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayGroupCreditDtoReponse {
    claimOnLineCode?: string | undefined;
    customerName?: string | undefined;
    totalClaimAmount?: number | undefined;
    creditLimit?: number | undefined;
    creditOver?: number | undefined;
    payTransaction?: number | undefined;
    creditDay?: number | undefined;
    creditAdd?: number | undefined;
    totalCount?: number | undefined;
}

export interface ClaimPayGroupCreditDtoReponseListServiceResponse {
    data?: ClaimPayGroupCreditDtoReponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayGroupDetailDtoResponse {
    claimPayGroupCode?: string | undefined;
    personName?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    toBank?: string | undefined;
    toAccountNo?: string | undefined;
    toAccountName?: string | undefined;
    paymentStatusName?: string | undefined;
    paymentStatusId?: number | undefined;
}

export interface ClaimPayGroupDetailDtoResponseServiceResponse {
    data?: ClaimPayGroupDetailDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayGroupDtoResponse {
    claimPayGroupId?: string | undefined;
    claimPayGroupCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    paymentStatusName?: string | undefined;
    paymentTypeName?: string | undefined;
    amount?: number | undefined;
    remark?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimPayGroupDtoResponseListServiceResponse {
    data?: ClaimPayGroupDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayGroupOverDtoResponse {
    claimPayGroupId?: string | undefined;
    claimPayGroupCode?: string | undefined;
    claimOnLineCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    branchId?: number | undefined;
    branchDetail?: string | undefined;
    totalClaimAmount?: number | undefined;
    payeeBankId?: number | undefined;
    payeeAccountNo?: string | undefined;
    payeeAccountName?: string | undefined;
    paymentStatusId?: number | undefined;
    paymentStatusName?: string | undefined;
    remark?: string | undefined;
    claimOnLineId?: string | undefined;
    paymentTypeId?: number | undefined;
    paymentTypeName?: string | undefined;
    totalCount?: number | undefined;
}

export interface ClaimPayGroupOverDtoResponseListServiceResponse {
    data?: ClaimPayGroupOverDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayGroupStatusDtoRequest {
    remark?: string | undefined;
}

export interface ClaimPayGroupStatusDtoResponse {
    claimPayGroupId?: string | undefined;
}

export interface ClaimPayGroupStatusDtoResponseServiceResponse {
    data?: ClaimPayGroupStatusDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayItemDtoResponse {
    claimPayItemCode?: string | undefined;
    claimCode?: string | undefined;
    amount?: number | undefined;
    totalAmount?: number | undefined;
    totalCount?: number | undefined;
}

export interface ClaimPayItemDtoResponseListServiceResponse {
    data?: ClaimPayItemDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPayTransactionDtoResponse {
    claimPayTransactionId?: string;
    claimPayTransactionCode?: string | undefined;
    premiumSourceStatusName?: string | undefined;
    remark?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    personName?: string | undefined;
    bankCode?: string | undefined;
    bankDescriptionEng?: string | undefined;
}

export interface ClaimPayTransactionDtoResponseListServiceResponse {
    data?: ClaimPayTransactionDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPaymentStatusFiveDetailDtoResponse {
    claimPayTransactionId?: string;
    claimPayTransactionCode?: string | undefined;
    claimPayGroupId?: string | undefined;
    fromBankId?: number | undefined;
    premiumSourceStatusId?: number | undefined;
    bankCode?: string | undefined;
    bankDescription?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    statusName?: string | undefined;
    bank?: string | undefined;
    responseCode?: string | undefined;
}

export interface ClaimPaymentStatusFiveDetailDtoResponseListServiceResponse {
    data?: ClaimPaymentStatusFiveDetailDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPaymentStatusFiveDtoResponse {
    claimOnLineId?: string | undefined;
    claimOnLineCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    paymentStatusId?: number | undefined;
    paymentStatusName?: string | undefined;
    claimPayGroupId?: string;
    toBankId?: number | undefined;
    toBankName?: string | undefined;
    toAccountNo?: string | undefined;
    toAccountName?: string | undefined;
    paymentAmount?: number | undefined;
    paymentTypeId?: number | undefined;
    createdByUserId?: number | undefined;
    premiumSourceStatusId?: number | undefined;
    totalCount?: number | undefined;
}

export interface ClaimPaymentStatusFiveDtoResponseListServiceResponse {
    data?: ClaimPaymentStatusFiveDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimPaymentStatusSevenDtoResponse {
    claimOnLineId?: string | undefined;
    claimOnLineCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    payeeBankId?: number | undefined;
    payeeAccountNo?: string | undefined;
    payeeAccountName?: string | undefined;
    toBankName?: string | undefined;
    paymentStatusId?: number | undefined;
    paymentStatusName?: string | undefined;
    claimPayGroupId?: string;
    totalAmount?: number | undefined;
    paymentTypeId?: number | undefined;
    createdByUserId?: number | undefined;
    totalCount?: number | undefined;
}

export interface ClaimPaymentStatusSevenDtoResponseListServiceResponse {
    data?: ClaimPaymentStatusSevenDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimReceiveGroupDetailDtoResponse {
    claimReceiveGroupCode?: string | undefined;
    personName?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    bank?: string | undefined;
    accountNo?: string | undefined;
    accountName?: string | undefined;
    receiveTypeName?: string | undefined;
}

export interface ClaimReceiveGroupDetailDtoResponseServiceResponse {
    data?: ClaimReceiveGroupDetailDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimReceiveGroupDtoRequest {
    claimPaybackPaymentHeaderId?: string;
    claimOnLineId?: string;
    receiveTypeId?: number;
    transferTypeId?: number;
    remark?: string | undefined;
    isActive?: boolean;
    createdByUserId?: number;
    createdDate?: dayjs.Dayjs;
    updatedByUserId?: number;
    updatedDate?: dayjs.Dayjs;
    claimReceiveItem?: ClaimReceiveItemDtoResponse[] | undefined;
}

export interface ClaimReceiveGroupDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface ClaimReceiveGroupDtoResponseServiceResponse {
    data?: ClaimReceiveGroupDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimReceiveItemByCRGDtoResponse {
    claimReceiveItemCode?: string | undefined;
    claimCode?: string | undefined;
    amount?: number | undefined;
    detail?: string | undefined;
    receiveTypeId?: number | undefined;
    totalCount?: number | undefined;
}

export interface ClaimReceiveItemByCRGDtoResponseListServiceResponse {
    data?: ClaimReceiveItemByCRGDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ClaimReceiveItemDtoResponse {
    claimPaybackPaymentDetailId?: string;
    claimOnlineItemId?: string;
    claimPayBackCode?: string | undefined;
    claimGroupCode?: string | undefined;
    claimPayBackXClaimId?: number;
    nplDetailId?: string;
    claimCode?: string | undefined;
    amount?: number;
}

export interface ContactPersonTypeDtoResponse {
    contactPersonTypeId?: number;
    contactPersonTypeName?: string | undefined;
}

export interface ContactPersonTypeDtoResponseListServiceResponse {
    data?: ContactPersonTypeDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CreateClaimOnLineDtoRequest {
    claimOnLineId?: string;
    productTypeId?: number;
    branchId?: number;
    serviceByUserId?: number;
    noticeByUserId?: number;
    zebraCarOwnerByUserId?: number;
    payeeBankId?: number;
    payeeAccountNo?: string | undefined;
    payeeAccountName?: string | undefined;
    contactPersonTypeId?: number;
    contactPersonName?: string | undefined;
    contactPersonPhoneNo?: string | undefined;
    createdByUserId?: number;
    createdByEmpCode?: string | undefined;
    isAddNewAccount?: boolean | undefined;
    isClaimMistake?: boolean;
    receiveDocTypeId?: number;
    productCode?: string | undefined;
    insuredCompany_id?: string | undefined;
    claimOnlineItem?: CreateClaimOnlineItemDtoRequest[] | undefined;
}

export interface CreateClaimOnLineDtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
    claimOnLineCode?: string | undefined;
    claimOnLineId?: string | undefined;
    claimPayGroupId?: string | undefined;
    claimPayGroupCode?: string | undefined;
    paymentTypeId?: number | undefined;
    messageHeader?: string | undefined;
    messageDetail?: string | undefined;
    messageRemark?: string | undefined;
}

export interface CreateClaimOnLineDtoResponseServiceResponse {
    data?: CreateClaimOnLineDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CreateClaimOnlineItemDtoRequest {
    applicationCode?: string | undefined;
    schoolName?: string | undefined;
    customerCode?: string | undefined;
    customerName?: string | undefined;
    appStartCoverDate?: dayjs.Dayjs;
    appEndCoverDate?: dayjs.Dayjs | undefined;
    appStatus?: string | undefined;
    dateHappen?: dayjs.Dayjs;
    dateNotice?: dayjs.Dayjs | undefined;
    dateIn?: dayjs.Dayjs | undefined;
    dateOut?: dayjs.Dayjs | undefined;
    claimAdmitTypeCode?: string | undefined;
    claimAmount?: number;
    claimRemark?: string | undefined;
    document?: CreateDocumentDtoRequest[] | undefined;
}

export interface CreateClaimPayTransactionDtoRequest {
    claimOnLineId: string;
    claimPayGroupId: string;
    claimOnLineCode: string;
    paymentTypeId: number;
    bankId: number;
    payeeAccountNo: string;
    payeeAccountName: string;
    paymentAmount?: number;
    isAccountUpdated: boolean;
    createdByUserId: number;
}

export interface CreateCustomerBankAccountDtoRequest {
    applicationCode: string;
    bankId: number;
    bankName: string;
    payeeAccountNo: string;
    payeeAccountName: string;
    userId: number;
}

export interface CreateCustomerBankAccountDtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface CreateCustomerBankAccountDtoResponseServiceResponse {
    data?: CreateCustomerBankAccountDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CreateDocumentDtoRequest {
    documentId?: string;
    documentCode?: string | undefined;
    documentTypeId?: number | undefined;
}

export interface CreateNPLDetail {
    claimOnLineItemId: string;
    amount: number;
    nplCauseId: number;
    remark?: string | undefined;
}

export interface CreateNPLDtoRequest {
    claimOnLineId: string;
    nplDetails?: CreateNPLDetail[] | undefined;
}

export interface CreateNPLDtoResponse {
    nplCode?: string | undefined;
}

export interface CreateNPLDtoResponseServiceResponse {
    data?: CreateNPLDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CreateRefundQueueDtoResponse {
    refundQueueId?: string | undefined;
    refundQueueCode?: string | undefined;
}

export interface CreateRefundQueueDtoResponseServiceResponse {
    data?: CreateRefundQueueDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CreditLimitDtoResponse {
    remainingCreditLimit?: number | undefined;
}

export interface CreditLimitDtoResponseServiceResponse {
    data?: CreditLimitDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CustomerPADetailDtoResponse {
    customerCode?: string | undefined;
    applicationCode?: string | undefined;
    customerName?: string | undefined;
    zCard_Id?: string | undefined;
    startCoverDate?: dayjs.Dayjs | undefined;
    activeCoverDate?: dayjs.Dayjs | undefined;
    endCoverDate?: dayjs.Dayjs | undefined;
    status?: string | undefined;
    benefitDetail?: string | undefined;
    coverage?: number | undefined;
    productCategoryCode?: string | undefined;
    productCategory?: string | undefined;
    insuranceCompany_id?: string | undefined;
}

export interface CustomerPADetailDtoResponseServiceResponse {
    data?: CustomerPADetailDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CustomerPASearchDtoResponse {
    code?: string | undefined;
    zCard_Id?: string | undefined;
    customerName?: string | undefined;
    customerType?: string | undefined;
    applicationStatus?: string | undefined;
    startCoverDate?: dayjs.Dayjs | undefined;
    endCoverDate?: dayjs.Dayjs | undefined;
    customerCode?: string | undefined;
    insuranceCompany_id?: string | undefined;
    countBlaclist?: number | undefined;
    totalCount?: number | undefined;
}

export interface CustomerPASearchDtoResponseListServiceResponse {
    data?: CustomerPASearchDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CustomerPHDetailDtoResponse {
    applicationCode?: string | undefined;
    fullName?: string | undefined;
    zCard_id?: string | undefined;
    status_id?: string | undefined;
    status?: string | undefined;
    productCode?: string | undefined;
    product?: string | undefined;
    startCoverDate?: dayjs.Dayjs | undefined;
    cancelDate?: dayjs.Dayjs | undefined;
    insuredCompany_id?: string | undefined;
    countOPD?: number | undefined;
}

export interface CustomerPHDetailDtoResponseServiceResponse {
    data?: CustomerPHDetailDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CustomerPHSearchDtoResponse {
    application_ID?: string | undefined;
    fullName?: string | undefined;
    zCard_id?: string | undefined;
    status_id?: string | undefined;
    status?: string | undefined;
    productID?: string | undefined;
    product?: string | undefined;
    startCoverDate?: dayjs.Dayjs | undefined;
    cancelDate?: dayjs.Dayjs | undefined;
    insuredCompany_id?: string | undefined;
    countBlacklist?: number | undefined;
    totalCount?: number | undefined;
}

export interface CustomerPHSearchDtoResponseListServiceResponse {
    data?: CustomerPHSearchDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DasboardClaimStatusTrackResponse {
    dashboardName?: string | undefined;
    claimOnLineStatusId?: number | undefined;
    claimOnLineStatusName?: string | undefined;
    totalCount?: number | undefined;
    amount?: number | undefined;
}

export interface DasboardClaimStatusTrackResponseListServiceResponse {
    data?: DasboardClaimStatusTrackResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardAccountBalanceDtoResponse {
    bankId?: number | undefined;
    balance?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
}

export interface DashboardAccountBalanceDtoResponseListServiceResponse {
    data?: DashboardAccountBalanceDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardClaimPendingDtoResponse {
    dashboardName?: string | undefined;
    itemCount?: number | undefined;
}

export interface DashboardClaimPendingDtoResponseListServiceResponse {
    data?: DashboardClaimPendingDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardDifferanceAmountClaimDtoResponse {
    totalCount?: number | undefined;
    totalAmount?: number | undefined;
}

export interface DashboardDifferanceAmountClaimDtoResponseServiceResponse {
    data?: DashboardDifferanceAmountClaimDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardRetrospectiveTransferDtoResponse {
    transferDate?: dayjs.Dayjs | undefined;
    paymentToday?: number | undefined;
}

export interface DashboardRetrospectiveTransferDtoResponseListServiceResponse {
    data?: DashboardRetrospectiveTransferDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardTransferTrackDetailConDtoResponse {
    dashboardName?: string | undefined;
    totalCount?: number | undefined;
    amount?: number | undefined;
}

export interface DashboardTransferTrackDetailConDtoResponseListServiceResponse {
    data?: DashboardTransferTrackDetailConDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardTransferTrackDetailRefundDtoResponse {
    dashboardName?: string | undefined;
    totalCount?: number | undefined;
    refundAmount?: number | undefined;
}

export interface DashboardTransferTrackDetailRefundDtoResponseListServiceResponse {
    data?: DashboardTransferTrackDetailRefundDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardTransferTrackDetailTotalDtoResponse {
    dashboardName?: string | undefined;
    paymentStatusId?: number | undefined;
    paymentStatusName?: string | undefined;
    totalCount?: number | undefined;
    amount?: number | undefined;
}

export interface DashboardTransferTrackDetailTotalDtoResponseListServiceResponse {
    data?: DashboardTransferTrackDetailTotalDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DashboardTransferTrackDtoResponse {
    countTotalSuccess?: number;
    countSuccessBBL?: number;
    countSuccessKTB?: number;
    countOvertimePay?: number;
    paymentAmountBBL?: number;
    paymentAmountKTB?: number;
    overtimePayAmount?: number;
    countTotalFail?: number | undefined;
    countFailSystem?: number;
    countFailAccount?: number;
    countFailBank?: number;
}

export interface DashboardTransferTrackDtoResponseListServiceResponse {
    data?: DashboardTransferTrackDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DeleteTmpHospitalClaimTrackingDtoRequest {
    tmpHospitalClaimTrackingId?: string | undefined;
    userId?: number | undefined;
}

export interface DeleteTmpHospitalClaimTranckingDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface DeleteTmpHospitalClaimTranckingDtoResponseServiceResponse {
    data?: DeleteTmpHospitalClaimTranckingDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DocumentTypeDtoResponse {
    documentId?: string | undefined;
    documentCode?: string | undefined;
    documentTypeId?: number | undefined;
    documentTypeName?: string | undefined;
    docStorageSubType?: number | undefined;
}

export interface DocumentTypeDtoResponseListServiceResponse {
    data?: DocumentTypeDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DownloadReportNPLDtoRequest {
    isRemain?: boolean | undefined;
    dateFrom?: dayjs.Dayjs | undefined;
    dateTo?: dayjs.Dayjs | undefined;
}

export interface EmployeeOwnerZebraCarDtoResponse {
    user_ID?: number;
    employeeId?: number;
    person_ID?: number | undefined;
    employeeCode?: string | undefined;
    title?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    personName?: string | undefined;
    nickName?: string | undefined;
    branch?: string | undefined;
    team?: string | undefined;
    employeeStatus?: string | undefined;
    detail?: string | undefined;
    totalCount?: number | undefined;
}

export interface EmployeeOwnerZebraCarDtoResponseListServiceResponse {
    data?: EmployeeOwnerZebraCarDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface FundPaymentDtoResponse {
    claimPayBackCode?: string | undefined;
    claimReceiveGroupId?: string | undefined;
    claimPay?: number | undefined;
    claimPayBackXClaimDate?: dayjs.Dayjs | undefined;
    transactionType?: string | undefined;
    totalCount?: number | undefined;
    detail?: string | undefined;
}

export interface FundPaymentDtoResponseListServiceResponse {
    data?: FundPaymentDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface FundReceiveDtoResponse {
    claimReceiveGroupId?: string;
    claimReceiveGroupCode?: string | undefined;
    claimOnLineId?: string;
    claimPay?: number | undefined;
    claimPayBackXClaimDate?: dayjs.Dayjs | undefined;
    transactionType?: string | undefined;
    totalCount?: number | undefined;
}

export interface FundReceiveDtoResponseListServiceResponse {
    data?: FundReceiveDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface FundRefundDtoResponse {
    claimReceiveGroupCode?: string | undefined;
    claimReceiveGroupId?: string;
    claimPay?: number | undefined;
    claimPayBackXClaimDate?: dayjs.Dayjs | undefined;
    transactionType?: string | undefined;
    totalCount?: number | undefined;
}

export interface FundRefundDtoResponseListServiceResponse {
    data?: FundRefundDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetAccountClaimPayDtoResponse {
    claimPayGroupId?: string | undefined;
    toBankId?: number | undefined;
    bankDetail?: string | undefined;
    toAccountNo?: string | undefined;
    toAccountName?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
}

export interface GetAccountClaimPayDtoResponseServiceResponse {
    data?: GetAccountClaimPayDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetAccountDetailDtoResponse {
    bankId?: number | undefined;
    bankName?: string | undefined;
    accountNo?: string | undefined;
    accountName?: string | undefined;
    customerBankAccountId?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    id?: number;
}

export interface GetAccountDetailDtoResponseListServiceResponse {
    data?: GetAccountDetailDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetClaimAdmitTypeTransactionDtoResponse {
    detail?: string | undefined;
    fromClaimAdmitTypeDetail?: string | undefined;
    toClaimAdmitTypeDetail?: string | undefined;
}

export interface GetClaimAdmitTypeTransactionDtoResponseListServiceResponse {
    data?: GetClaimAdmitTypeTransactionDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetClaimOnlineByClaimOnLineStatusDtoResponse {
    claimOnLineCode?: string | undefined;
    claimOnLineId?: string | undefined;
    claimOnLineStatusId?: number | undefined;
    productTypeId?: number | undefined;
    customerName?: string | undefined;
}

export interface GetClaimOnlineByClaimOnLineStatusDtoResponseServiceResponse {
    data?: GetClaimOnlineByClaimOnLineStatusDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetHospitalClaimHeaderDtoResponse {
    createdDate?: dayjs.Dayjs | undefined;
    hospitalReceiveDocAdmitTypeName?: string | undefined;
    hospitalReceiveDocAdmitTypeId?: number | undefined;
    hospitalCount?: number | undefined;
    personName?: string | undefined;
    createdByUserId?: number | undefined;
    totalCount?: number | undefined;
}

export interface GetHospitalClaimHeaderDtoResponseListServiceResponse {
    data?: GetHospitalClaimHeaderDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetHospitalClaimTrackingDetailDtoResponse {
    number?: number | undefined;
    hospitalClaimTrackingId?: string;
    claimCode?: string | undefined;
    trackingNumber?: string | undefined;
    hospitalName?: string | undefined;
    customerName?: string | undefined;
    claimAdmitTypeId?: string | undefined;
    claimAdmitTypeName?: string | undefined;
    amount?: number | undefined;
    claimStatus?: string | undefined;
    totalCount?: number | undefined;
}

export interface GetHospitalClaimTrackingDetailDtoResponseListServiceResponse {
    data?: GetHospitalClaimTrackingDetailDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetNPLDetailsDtoResponse {
    claimOnLineItemId?: string | undefined;
    claimCode?: string | undefined;
    applicationCode?: string | undefined;
    customerName?: string | undefined;
    claimAmount?: number | undefined;
    payBackAmount?: number | undefined;
    remainAmount?: number | undefined;
}

export interface GetNPLDetailsDtoResponseListServiceResponse {
    data?: GetNPLDetailsDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetNPLHeaderDtoResponse {
    claimOnLineId?: string | undefined;
    claimOnLineCode?: string | undefined;
    branchId?: number | undefined;
    branchDetail?: string | undefined;
    payeeBankId?: number | undefined;
    payeeBankName?: string | undefined;
    payeeAccountNo?: string | undefined;
    payeeAccountName?: string | undefined;
    claimOnLineStatusId?: number | undefined;
    claimOnLineStatusName?: string | undefined;
    serviceByUserId?: number | undefined;
    serviceEmployeeCode?: string | undefined;
    servicePersonName?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
}

export interface GetNPLHeaderDtoResponseServiceResponse {
    data?: GetNPLHeaderDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetPersonContactDetailDtoResponse {
    personContactTypeId?: number | undefined;
    personContactType?: string | undefined;
    personContactPhoneNo?: string | undefined;
    personContactName?: string | undefined;
    id?: number;
}

export interface GetPersonContactDetailDtoResponseListServiceResponse {
    data?: GetPersonContactDetailDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetRefundDetailByRefundQueueIdDtoResponse {
    refundItemId?: string | undefined;
    refundItemCode?: string | undefined;
    claimCode?: string | undefined;
    customerName?: string | undefined;
    claimAmount?: number | undefined;
    refundAmount?: number | undefined;
    remain?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    refundDate?: dayjs.Dayjs | undefined;
    totalCount?: number | undefined;
}

export interface GetRefundDetailByRefundQueueIdDtoResponseListServiceResponse {
    data?: GetRefundDetailByRefundQueueIdDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetRefundHeaderByRefundQueueIdDtoResponse {
    refundQueueId?: string | undefined;
    refundQueueCode?: string | undefined;
    claimOnLineCode?: string | undefined;
    branchDetail?: string | undefined;
    customerName?: string | undefined;
    createdByUserId?: number | undefined;
    personName?: string | undefined;
    employeeCode?: string | undefined;
    refundCount?: number | undefined;
    totalClaimAmount?: number | undefined;
    totalRefundAmount?: number | undefined;
    remain?: number | undefined;
    departmentId?: string | undefined;
    departmentCode?: string | undefined;
    remark?: string | undefined;
    refundRejectCauseId?: number | undefined;
    refundRejectCauseName?: string | undefined;
    documentId?: string | undefined;
    documentCode?: string | undefined;
}

export interface GetRefundHeaderByRefundQueueIdDtoResponseServiceResponse {
    data?: GetRefundHeaderByRefundQueueIdDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetRefundQueueClaimDtoResponse {
    refundQueueId?: string;
    refundQueueCode?: string | undefined;
    claimOnLineId?: string | undefined;
    refundAmount?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    refundStatusId?: number | undefined;
    refundStatusName?: string | undefined;
    refundCauseName?: string | undefined;
    totalCount?: number | undefined;
}

export interface GetRefundQueueClaimDtoResponseListServiceResponse {
    data?: GetRefundQueueClaimDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetRefundQueueItemDtoResponse {
    refundItemId?: string;
    refundQueueId?: string;
    refundItemCode?: string | undefined;
    claimCode?: string | undefined;
    amount?: number | undefined;
    totalCount?: number | undefined;
}

export interface GetRefundQueueItemDtoResponseListServiceResponse {
    data?: GetRefundQueueItemDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetRefundQueueTransactionDtoResponse {
    id?: number;
    refundQueueCode?: string | undefined;
    createdByUserId?: number | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    refundStatusId?: number | undefined;
    personName?: string | undefined;
    refundStatusName?: string | undefined;
}

export interface GetRefundQueueTransactionDtoResponseListServiceResponse {
    data?: GetRefundQueueTransactionDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetSchoolDtoResponse {
    year?: number | undefined;
    applicationCode?: string | undefined;
    schoolName?: string | undefined;
    district?: string | undefined;
    province?: string | undefined;
    productCategory?: string | undefined;
    product?: string | undefined;
    applicationStatusCode?: string | undefined;
    applicationStatus?: string | undefined;
    startCoverDate?: dayjs.Dayjs | undefined;
    endCoverDate?: dayjs.Dayjs | undefined;
    contactName?: string | undefined;
    contactBankAccountNo?: string | undefined;
    contactBankAccountName?: string | undefined;
    contactBankName?: string | undefined;
    totalCount?: number | undefined;
}

export interface GetSchoolDtoResponseListServiceResponse {
    data?: GetSchoolDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GroupYearPADtoResponse {
    code?: string | undefined;
    detail?: string | undefined;
    totalCount?: number | undefined;
}

export interface GroupYearPADtoResponseListServiceResponse {
    data?: GroupYearPADtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface HospitalClaimTrackingTmpDtoResponse {
    rowId?: number;
    tmpHospitalClaimTrackingId?: string;
    claimCode?: string | undefined;
    trackingNumber?: string | undefined;
    hospitalName?: string | undefined;
    hospitalId?: string | undefined;
    admittedDate?: dayjs.Dayjs | undefined;
    adminDate?: dayjs.Dayjs | undefined;
    fromAdminDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    claimAdmitTypeId?: string | undefined;
    claimAdmitTypeName?: string | undefined;
    amount?: number | undefined;
    isManual?: boolean | undefined;
    validateResult?: string | undefined;
    productTypeId?: number | undefined;
    hospitalReceiveDocAdmitTypeId?: number | undefined;
    totalCount?: number | undefined;
}

export interface HospitalClaimTrackingTmpDtoResponseListServiceResponse {
    data?: HospitalClaimTrackingTmpDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface HospitalDetailAllDtoResponse {
    hospitalId?: string | undefined;
    hospitalName?: string | undefined;
}

export interface HospitalDetailAllDtoResponseListServiceResponse {
    data?: HospitalDetailAllDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface InsertClaimMistakeDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
    claimOnLineCode?: string | undefined;
}

export interface InsertClaimMistakeDtoResponseServiceResponse {
    data?: InsertClaimMistakeDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface InsertClaimOnLineCancelCauseDtoRequest {
    claimOnLineCode: string;
    cancelCauseId?: number;
    remark?: string | undefined;
    createdByUserId?: number;
}

export interface InsertClaimOnLineCancelCauseDtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
    flagResult?: number | undefined;
    claimCode?: string | undefined;
}

export interface InsertClaimOnLineCancelCauseDtoResponseListServiceResponse {
    data?: InsertClaimOnLineCancelCauseDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface InsertClaimSmiDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface InsertClaimSmiDtoResponseServiceResponse {
    data?: InsertClaimSmiDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface InsertHospitalClaimTrackingDtoRequest {
    createdByUserId: number;
}

export interface InsertHospitalClaimTrackingDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface InsertHospitalClaimTrackingDtoResponseServiceResponse {
    data?: InsertHospitalClaimTrackingDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface InsertTmpHospitalClaimTrackingDtoRequest {
    trackingNumber: string;
    productTypeId?: number | undefined;
    claimAdmitTypeCode?: string | undefined;
    claimAdmitTypeName?: string | undefined;
    claimCode?: string | undefined;
    hospitalClaimInformCode?: string | undefined;
    adminDate: dayjs.Dayjs;
    fromAdminDate?: dayjs.Dayjs | undefined;
    amount: number;
    hospitalId?: string | undefined;
    hospitalName?: string | undefined;
    admittedDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    isManual: boolean;
    createdByUserId: number;
}

export interface InsertTmpHospitalClaimTrackingDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface InsertTmpHospitalClaimTrackingDtoResponseServiceResponse {
    data?: InsertTmpHospitalClaimTrackingDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface InsertTransferDtoRequest {
    claimOnLineId?: string;
    claimOnLineCode?: string | undefined;
    transferCauseId?: number;
    remark?: string | undefined;
    claimPayGroupId?: string;
    claimAmount?: number;
    createdByUserId?: number;
    claimPayItem?: TransferListDtoResponse[] | undefined;
}

export interface InsertTransferDtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
    claimPayGroupCode?: string | undefined;
    claimPayGroupId?: string | undefined;
    paymentTypeId?: number | undefined;
    messageHeader?: string | undefined;
    messageDetail?: string | undefined;
}

export interface InsertTransferDtoResponseServiceResponse {
    data?: InsertTransferDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface IsResultSwitchDtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
    id?: string;
}

export interface IsResultSwitchDtoResponseServiceResponse {
    data?: IsResultSwitchDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface LastTransferTransactionDtoResponse {
    claimOnLineId?: string | undefined;
    claimPayGroupId?: string;
    claimPayTransactionId?: string | undefined;
    claimPayGroupCode?: string | undefined;
    paymentTypeId?: number | undefined;
    bankId?: number | undefined;
    bankName?: string | undefined;
    toAccountNo?: string | undefined;
    toAccountName?: string | undefined;
    paymentAmount?: number | undefined;
    createdByUserId?: number | undefined;
}

export interface LastTransferTransactionDtoResponseServiceResponse {
    data?: LastTransferTransactionDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface NPLCauseDtoResponse {
    nplCauseId?: number | undefined;
    nplCauseName?: string | undefined;
}

export interface NPLCauseDtoResponseListServiceResponse {
    data?: NPLCauseDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface OverTimePayDtoResponse {
    parameterName?: string | undefined;
    valueNumber?: number | undefined;
    valueString?: string | undefined;
    valueDateTime?: dayjs.Dayjs | undefined;
    valueBoolean?: boolean | undefined;
    isAutoMode?: boolean | undefined;
    remark?: string | undefined;
    updatedByUserId?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
}

export interface OverTimePayDtoResponseServiceResponse {
    data?: OverTimePayDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface OverTimePayLogDtoResponse {
    overtimePayLogId?: string;
    detail?: string | undefined;
    isOvertimePay?: boolean | undefined;
    isActive?: boolean | undefined;
    createdByUserId?: number | undefined;
    personName?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
}

export interface OverTimePayLogDtoResponseListServiceResponse {
    data?: OverTimePayLogDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface OverTransactionRequestDto {
    claimPayGroupId: string;
    paymentAmount: number;
    overTransaction?: number | undefined;
    creditLimitNow: number;
    amount: number;
    creditRemainDay: number;
    creditAdd: number;
}

export interface OverTransactionResponseDto {
    claimPayTransactionId?: string | undefined;
}

export interface OverTransactionResponseDtoServiceResponse {
    data?: OverTransactionResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PaymentStatusDtoResponse {
    paymentStatusId?: number;
    paymentStatusName?: string | undefined;
}

export interface PaymentStatusDtoResponseListServiceResponse {
    data?: PaymentStatusDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ProviceAllDtoResponse {
    code?: string | undefined;
    detail?: string | undefined;
    totalCount?: number | undefined;
}

export interface ProviceAllDtoResponseListServiceResponse {
    data?: ProviceAllDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ReceiveDocTypeDtoResponse {
    receiveDocTypeId?: number | undefined;
    receiveDocTypeName?: string | undefined;
}

export interface ReceiveDocTypeDtoResponseListServiceResponse {
    data?: ReceiveDocTypeDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundApproveDtoResponse {
    refundQueueId?: string | undefined;
    refundQueueCode?: string | undefined;
}

export interface RefundApproveDtoResponseServiceResponse {
    data?: RefundApproveDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundCancelDtoRequest {
    refundQueueId: string;
    remark?: string | undefined;
}

export interface RefundCancelDtoResponse {
    refundQueueId?: string;
}

export interface RefundCancelDtoResponseServiceResponse {
    data?: RefundCancelDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundCauseDtoResponse {
    refundCauseId?: number | undefined;
    refundCauseName?: string | undefined;
}

export interface RefundCauseDtoResponseListServiceResponse {
    data?: RefundCauseDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundQueueDetailDtoResponse {
    refundQueueId?: string;
    refundQueueCode?: string | undefined;
    refundByName?: string | undefined;
    refundDate?: dayjs.Dayjs | undefined;
    toBank?: string | undefined;
    toAccountNo?: string | undefined;
    toAccountName?: string | undefined;
    refundStatusName?: string | undefined;
    remark?: string | undefined;
}

export interface RefundQueueDetailDtoResponseServiceResponse {
    data?: RefundQueueDetailDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundQueueDtoResponse {
    refundQueueCode?: string | undefined;
    claimOnLineCode?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    totalClaimAmount?: number | undefined;
    refundAmount?: number | undefined;
    refundStatusId?: number | undefined;
    refundStatusName?: string | undefined;
    remark?: string | undefined;
    refundQueueId?: string | undefined;
    claimOnLineId?: string | undefined;
    refundCauseId?: number | undefined;
    refundCauseName?: string | undefined;
    employeeCode?: string | undefined;
    personName?: string | undefined;
    branchId?: number | undefined;
    branchName?: string | undefined;
    totalCount?: number | undefined;
}

export interface RefundQueueDtoResponseListServiceResponse {
    data?: RefundQueueDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundRejectCauseDtoResponse {
    refundRejectCauseId?: number | undefined;
    refundRejectCauseName?: string | undefined;
}

export interface RefundRejectCauseDtoResponseListServiceResponse {
    data?: RefundRejectCauseDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundStatusDtoResponse {
    refundStatusId?: number | undefined;
    refundStatusName?: string | undefined;
}

export interface RefundStatusDtoResponseListServiceResponse {
    data?: RefundStatusDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RefundUnApproveDtoRequest {
    refundRejectCauseId?: number | undefined;
    remark?: string | undefined;
}

export interface RefundUnApproveDtoResponse {
    refundQueueId?: string | undefined;
}

export interface RefundUnApproveDtoResponseServiceResponse {
    data?: RefundUnApproveDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ReportDifferentPaymentDtoRequest {
    differentPaymentTypeId?: number | undefined;
}

export interface SMIClaimApprovalGroupResponse {
    smiClaimApprovalRequests?: SMIClaimApprovalResponse[] | undefined;
}

export interface SMIClaimApprovalResponse {
    claimExportTransactionId?: string;
    claimDataSourceId?: number | undefined;
    claimCode?: string | undefined;
    claimOnLineItemId?: string | undefined;
    claimOnLineId?: string | undefined;
    claimHeaderGroupCode?: string | undefined;
    transferGroupCode?: string | undefined;
    receivingBankId?: number;
    receivingBankName?: string | undefined;
    receivingBankAccountNo?: string | undefined;
    receivingName?: string | undefined;
    receivingPhoneNumber?: string | undefined;
    receivingEmail?: string | undefined;
    smiStatusId?: number | undefined;
    smiPaidAmount?: number | undefined;
    smiResponseByUserCode?: string | undefined;
    smiResponseDate?: dayjs.Dayjs;
    refCode?: string;
    isSucceed?: boolean;
    transRefNo?: string | undefined;
    statusBank?: string | undefined;
    description?: string | undefined;
    descriptionTh?: string | undefined;
    transferDate?: dayjs.Dayjs;
    payResultStatusId?: number;
    payResultDescription?: string | undefined;
    transType?: string | undefined;
    fromBankId?: number;
    fromAccountNo?: string | undefined;
    fromAccountName?: string | undefined;
    smiClaimCancelCauseStatusId?: number | undefined;
    cancelCauseRemark?: string | undefined;
    smiClaimApproveDisapproveStatusId?: number;
    smiClaimApproveDisapproveRemark?: string | undefined;
    claimApproveAmount?: number | undefined;
    claimRejectAmount?: number | undefined;
    remarkApprove?: string | undefined;
}

export interface ServiceUserDtoResponse {
    employee_ID?: number | undefined;
    employeeCode?: string | undefined;
    employeeName?: string | undefined;
}

export interface ServiceUserDtoResponseListServiceResponse {
    data?: ServiceUserDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TransactionTypeDtoResponse {
    transactionTypeId?: number;
    transactionTypeName?: string | undefined;
}

export interface TransactionTypeDtoResponseListServiceResponse {
    data?: TransactionTypeDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TransferCauseDtoResponse {
    transferCauseId?: number;
    transferCauseName?: string | undefined;
}

export interface TransferCauseDtoResponseListServiceResponse {
    data?: TransferCauseDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TransferCpg {
    claimOnLineIdFrom: string;
    claimOnLineCodeFrom: string;
    claimOnLineIdTo: string;
    claimOnLineCodeTo: string;
    claimPayGroupIdFrom: string;
    claimPayGroupCodeFrom: string;
}

export interface TransferCpgDtoRequest {
    transferCpgDetail: TransferCpg[];
}

export interface TransferCpgDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface TransferCpgDtoResponseServiceResponse {
    data?: TransferCpgDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TransferDetailDtoResponse {
    claimOnLineId?: string;
    claimOnLineCode?: string | undefined;
    claimCount?: number | undefined;
    mainBankAccount?: string | undefined;
    customerName?: string | undefined;
    personName?: string | undefined;
    amount?: number | undefined;
    productTypeId?: number | undefined;
}

export interface TransferDetailDtoResponseServiceResponse {
    data?: TransferDetailDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TransferListDtoResponse {
    id?: number;
    claimOnLineItemId?: string;
    customerName?: string | undefined;
    productTypeId?: number | undefined;
    customerType?: string | undefined;
    claimCode?: string | undefined;
    amount?: number | undefined;
    transferAmount?: number | undefined;
    totalCount?: number | undefined;
}

export interface TransferListDtoResponseListServiceResponse {
    data?: TransferListDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TransferMonitorDtoResponse {
    claimPayGroupId?: string;
    claimPayGroupCode?: string | undefined;
    claimOnLineId?: string | undefined;
    claimOnLineCode?: string | undefined;
    productTypeId?: number | undefined;
    claimCreatedDate?: dayjs.Dayjs | undefined;
    customerName?: string | undefined;
    branchId?: number | undefined;
    branch?: string | undefined;
    claimAmount?: number | undefined;
    transferAmount?: number | undefined;
    paymentStatusId?: number | undefined;
    paymentStatusName?: string | undefined;
    remark?: string | undefined;
    totalCount?: number | undefined;
}

export interface TransferMonitorDtoResponseListServiceResponse {
    data?: TransferMonitorDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TransferTypeDtoResponse {
    transferTypeId?: number | undefined;
    transferTypeName?: string | undefined;
}

export interface TransferTypeDtoResponseListServiceResponse {
    data?: TransferTypeDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface UpdateCustomerBankAccountDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface UpdateCustomerBankAccountDtoResponseServiceResponse {
    data?: UpdateCustomerBankAccountDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface UpdateHospitalClaimTrackingManualDtoRequest {
    tmpHospitalClaimTrackigId?: string;
    claimCode?: string | undefined;
    trackingNumber?: string | undefined;
    productTypeId?: number;
    hospitalId?: string | undefined;
    hospitalName?: string | undefined;
    customerName?: string | undefined;
    adminDate?: dayjs.Dayjs;
    admittedDate?: dayjs.Dayjs;
    fromAdminDate?: dayjs.Dayjs | undefined;
    claimAdmitTypeId?: string | undefined;
    claimAdmitTypeName?: string | undefined;
    hospitalReceiveDocAdmitTypeId?: number | undefined;
    amount?: number;
    updatedByUserId?: number;
}

export interface UpdateHospitalClaimTrackingManualDtoResponse {
    isResult?: boolean;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface UpdateHospitalClaimTrackingManualDtoResponseServiceResponse {
    data?: UpdateHospitalClaimTrackingManualDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ValidateAdmitDateDtoRequest {
    productTypeId: number;
    applicationCode?: string | undefined;
    admitDate?: dayjs.Dayjs;
}

export interface ValidateAdmitDateDtoResponse {
    countClaimOnLine?: number | undefined;
}

export interface ValidateAdmitDateDtoResponseServiceResponse {
    data?: ValidateAdmitDateDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ValidateCreateClaimPADtoRequest {
    customerCode: string;
    claimAdmitTypeCode?: string | undefined;
    dateIn?: dayjs.Dayjs | undefined;
    dateOut?: dayjs.Dayjs | undefined;
    coverage?: number | undefined;
    amount?: number | undefined;
    dateHappen?: dayjs.Dayjs | undefined;
}

export interface ValidateCreateClaimPADtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface ValidateCreateClaimPADtoResponseServiceResponse {
    data?: ValidateCreateClaimPADtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ValidateCreateClaimPHDtoRequest {
    applicationCode: string;
    claimAdmitTypeCode: string;
    dateHappen: dayjs.Dayjs;
    dateIn?: dayjs.Dayjs | undefined;
    dateOut?: dayjs.Dayjs | undefined;
    amount?: number;
    coverage?: number | undefined;
}

export interface ValidateCreateClaimPHDtoResponse {
    isResult?: boolean | undefined;
    result?: string | undefined;
    msg?: string | undefined;
}

export interface ValidateCreateClaimPHDtoResponseServiceResponse {
    data?: ValidateCreateClaimPHDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ValidateMessageDtoRequest {
    applicationCode?: string | undefined;
    dateHappen?: dayjs.Dayjs | undefined;
    productCode?: string | undefined;
    app_StatusCode?: string | undefined;
    claimAdmitTypeCode?: string | undefined;
    app_StartCoverDate?: dayjs.Dayjs;
}

export interface ValidateMessageDtoResponse {
    isResult?: boolean;
    benefitMessage?: string | undefined;
    benefitAccidentMessage?: string | undefined;
    opdMessage?: string | undefined;
    checkDateMessage?: string | undefined;
    isDisabled?: boolean;
    message?: string | undefined;
    isBenefitTextWarning?: boolean;
    isAccidentTextWarning?: boolean;
    isOpdTextWarning?: boolean;
    ipdPricePerUnit?: number | undefined;
    ipdMaxQuantity?: number | undefined;
    ipdMaxPrice?: number | undefined;
    ipdICUPricePerUnit?: number | undefined;
    ipdICUMaxQuantity?: number | undefined;
    ipdICUMaxPrice?: number | undefined;
    opdPricePerUnit?: number | undefined;
    accidentPricePerUnit?: number | undefined;
}

export interface ValidateMessageDtoResponseServiceResponse {
    data?: ValidateMessageDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ValidateTransferSearchDtoResponse {
    isResult?: boolean;
    message?: string | undefined;
    claimOnLineCode?: string | undefined;
}

export interface ValidateTransferSearchDtoResponseServiceResponse {
    data?: ValidateTransferSearchDtoResponse;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}