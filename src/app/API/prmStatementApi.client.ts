//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as dayjs from 'dayjs';

export class FeeClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Upload Fee
     * @param bankId (optional)
     * @param bankAccountNO (optional)
     * @param file (optional)
     * @return Success
     */
    fee(bankId?: number | undefined, bankAccountNO?: string | undefined, file?: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/upload/fee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (bankId === null || bankId === undefined)
            throw new Error("The parameter 'bankId' cannot be null.");
        else
            content_.append("BankId", bankId.toString());
        if (bankAccountNO === null || bankAccountNO === undefined)
            throw new Error("The parameter 'bankAccountNO' cannot be null.");
        else
            content_.append("BankAccountNO", bankAccountNO.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFee(_response);
        });
    }

    protected processFee(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PremiumsStatementClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param bankId (optional)
     * @param bankAccountNo (optional)
     * @param file (optional)
     * @param uploadByUserId (optional)
     * @return Success
     */
    uploadfile(bankId?: string | undefined, bankAccountNo?: string | undefined, file?: FileParameter | undefined, uploadByUserId?: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/uploadfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (bankId === null || bankId === undefined)
            throw new Error("The parameter 'bankId' cannot be null.");
        else
            content_.append("BankId", bankId.toString());
        if (bankAccountNo === null || bankAccountNo === undefined)
            throw new Error("The parameter 'bankAccountNo' cannot be null.");
        else
            content_.append("BankAccountNo", bankAccountNo.toString());
        if (file === null || file === undefined)
            throw new Error("The parameter 'file' cannot be null.");
        else
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        if (uploadByUserId === null || uploadByUserId === undefined)
            throw new Error("The parameter 'uploadByUserId' cannot be null.");
        else
            content_.append("UploadByUserId", uploadByUserId.toString());

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUploadfile(_response);
        });
    }

    protected processUploadfile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * เรียกดูข้อมูล Statement upload
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    filter(bankId: number, tempId: string, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/previewstatement/filter?";
        if (bankId === undefined || bankId === null)
            throw new Error("The parameter 'bankId' must be defined and cannot be null.");
        else
            url_ += "BankId=" + encodeURIComponent("" + bankId) + "&";
        if (tempId === undefined || tempId === null)
            throw new Error("The parameter 'tempId' must be defined and cannot be null.");
        else
            url_ += "TempId=" + encodeURIComponent("" + tempId) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFilter(_response);
        });
    }

    protected processFilter(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorize", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * ยืนยัน upload Statement
     * @return Success
     */
    confirmdata(bankId: number, tempId: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/confirmuploadstatement/confirmdata?";
        if (bankId === undefined || bankId === null)
            throw new Error("The parameter 'bankId' must be defined and cannot be null.");
        else
            url_ += "BankId=" + encodeURIComponent("" + bankId) + "&";
        if (tempId === undefined || tempId === null)
            throw new Error("The parameter 'tempId' must be defined and cannot be null.");
        else
            url_ += "TempId=" + encodeURIComponent("" + tempId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processConfirmdata(_response);
        });
    }

    protected processConfirmdata(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorize", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * delete Statement Upload Tmp
     * @return Success
     */
    deletedata(bankId: number, tempId: string, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/deleteuploadstatement/deletedata?";
        if (bankId === undefined || bankId === null)
            throw new Error("The parameter 'bankId' must be defined and cannot be null.");
        else
            url_ += "BankId=" + encodeURIComponent("" + bankId) + "&";
        if (tempId === undefined || tempId === null)
            throw new Error("The parameter 'tempId' must be defined and cannot be null.");
        else
            url_ += "TempId=" + encodeURIComponent("" + tempId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeletedata(_response);
        });
    }

    protected processDeletedata(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorize", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * เรียกดู Statement UI2
     * @param fee (optional)
     * @param textSearch (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    filter2(bankId: number, bankAccountNo: string, fromDate: dayjs.Dayjs, toDate: dayjs.Dayjs, fee?: string | undefined, textSearch?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/previewstatementconfirm/filter?";
        if (bankId === undefined || bankId === null)
            throw new Error("The parameter 'bankId' must be defined and cannot be null.");
        else
            url_ += "BankId=" + encodeURIComponent("" + bankId) + "&";
        if (bankAccountNo === undefined || bankAccountNo === null)
            throw new Error("The parameter 'bankAccountNo' must be defined and cannot be null.");
        else
            url_ += "BankAccountNo=" + encodeURIComponent("" + bankAccountNo) + "&";
        if (fromDate === undefined || fromDate === null)
            throw new Error("The parameter 'fromDate' must be defined and cannot be null.");
        else
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === undefined || toDate === null)
            throw new Error("The parameter 'toDate' must be defined and cannot be null.");
        else
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (fee === null)
            throw new Error("The parameter 'fee' cannot be null.");
        else if (fee !== undefined)
            url_ += "Fee=" + encodeURIComponent("" + fee) + "&";
        if (textSearch === null)
            throw new Error("The parameter 'textSearch' cannot be null.");
        else if (textSearch !== undefined)
            url_ += "TextSearch=" + encodeURIComponent("" + textSearch) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFilter2(_response);
        });
    }

    protected processFilter2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);
        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorize", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * เรียกดู Statement UI2 V2
     * @param fee (optional)
     * @param textSearch (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    filter3(bankId: number, bankAccountNo: string, fromDate: dayjs.Dayjs, toDate: dayjs.Dayjs, fee?: boolean | undefined, textSearch?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/previewstatementconfirmV2/filter?";
        if (bankId === undefined || bankId === null)
            throw new Error("The parameter 'bankId' must be defined and cannot be null.");
        else
            url_ += "BankId=" + encodeURIComponent("" + bankId) + "&";
        if (bankAccountNo === undefined || bankAccountNo === null)
            throw new Error("The parameter 'bankAccountNo' must be defined and cannot be null.");
        else
            url_ += "BankAccountNo=" + encodeURIComponent("" + bankAccountNo) + "&";
        if (fromDate === undefined || fromDate === null)
            throw new Error("The parameter 'fromDate' must be defined and cannot be null.");
        else
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === undefined || toDate === null)
            throw new Error("The parameter 'toDate' must be defined and cannot be null.");
        else
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (fee === null)
            throw new Error("The parameter 'fee' cannot be null.");
        else if (fee !== undefined)
            url_ += "Fee=" + encodeURIComponent("" + fee) + "&";
        if (textSearch === null)
            throw new Error("The parameter 'textSearch' cannot be null.");
        else if (textSearch !== undefined)
            url_ += "TextSearch=" + encodeURIComponent("" + textSearch) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFilter3(_response);
        });
    }

    protected processFilter3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorize", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * usp_StatementEditChequeNo_Update
     * @param body (optional)
     * @return Success
     */
    updatestatementeditchequeno(body?: Usp_StatementEditChequeNo_UpdateDto | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/updatestatementeditchequeno";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json;odata.metadata=minimal;odata.streaming=true",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdatestatementeditchequeno(_response);
        });
    }

    protected processUpdatestatementeditchequeno(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorize", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * แสดงข้อมูลธนาคาร
     * @param bankName (optional)
     * @return Success
     */
    bank(bankName?: string | undefined, cancelToken?: CancelToken | undefined): Promise<BankServiceListResponseDto> {
        let url_ = this.baseUrl + "/bank?";
        if (bankName === null)
            throw new Error("The parameter 'bankName' cannot be null.");
        else if (bankName !== undefined)
            url_ += "bankName=" + encodeURIComponent("" + bankName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBank(_response);
        });
    }

    protected processBank(response: AxiosResponse): Promise<BankServiceListResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<BankServiceListResponseDto>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BankServiceListResponseDto>(null as any);
    }

    /**
     * แสดงข้อมูลเลขที่บัญชี
     * @param bankId (optional)
     * @return Success
     */
    bankaccount(bankId?: number | undefined, cancelToken?: CancelToken | undefined): Promise<BankAccountNoServiceListResponseDto> {
        let url_ = this.baseUrl + "/bankaccount?";
        if (bankId === null)
            throw new Error("The parameter 'bankId' cannot be null.");
        else if (bankId !== undefined)
            url_ += "bankId=" + encodeURIComponent("" + bankId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processBankaccount(_response);
        });
    }

    protected processBankaccount(response: AxiosResponse): Promise<BankAccountNoServiceListResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<BankAccountNoServiceListResponseDto>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BankAccountNoServiceListResponseDto>(null as any);
    }

    /**
     * แสดงข้อมูลเช็ค
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @return Success
     */
    filter4(chequeNo: string, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, page?: number | undefined, recordsPerPage?: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/statement/filter?";
        if (chequeNo === undefined || chequeNo === null)
            throw new Error("The parameter 'chequeNo' must be defined and cannot be null.");
        else
            url_ += "ChequeNo=" + encodeURIComponent("" + chequeNo) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFilter4(_response);
        });
    }

    protected processFilter4(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorize", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Bad Request", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Not Found", status, _responseText, _headers);

        } else if (status === 500) {
            const _responseText = response.data;
            return throwException("Internal Server Error", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface BankResponseDto {
    bankId: number
    bankName: string
    bankShortName?: string
}

export interface BankServiceListResponseDto {
    data: BankResponseDto[] | undefined
    isSuccess: boolean
    message: any
    code: any
    exceptionMessage: any
    serverDateTime: string
    totalAmountRecords: any
    totalAmountPages: any
    currentPage: any
    recordsPerPage: any
    pageIndex: any
}

export interface BankAccountNoResponseDto {
    organizeBankId: number
    bankAccountNo: string
    bankAccountName: string
}

export interface BankAccountNoServiceListResponseDto {
    data: BankAccountNoResponseDto[] | undefined
    isSuccess: boolean
    message: any
    code: any
    exceptionMessage: any
    serverDateTime: string
    totalAmountRecords: any
    totalAmountPages: any
    currentPage: any
    recordsPerPage: any
    pageIndex: any
}

export interface Usp_StatementEditChequeNo_UpdateDto {
    statementId: string;
    chequeNo: string;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}