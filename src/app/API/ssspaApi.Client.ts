//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as dayjs from 'dayjs';

export class ClaimCustomerClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * แสดงข้อมูล ลูกค้าและผลิตภัณฑ์ จากรหัสเคลม
     * @param claimCode (optional)
     * @return Success
     */
    customerProductByClaim(claimCode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<CustomerProductResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/Claim/CustomerProductByClaim?";
        if (claimCode === null)
            throw new Error("The parameter 'claimCode' cannot be null.");
        else if (claimCode !== undefined)
            url_ += "ClaimCode=" + encodeURIComponent("" + claimCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCustomerProductByClaim(_response);
        });
    }

    protected processCustomerProductByClaim(response: AxiosResponse): Promise<CustomerProductResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<CustomerProductResponseDtoListServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerProductResponseDtoListServiceResponse>(null as any);
    }
}

export class CustomerClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * แสดงข้อมูล ลูกค้า
     * @return Success
     */
    premium(applicationCode: string, cancelToken?: CancelToken | undefined): Promise<CustomerResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/Premium/{applicationCode}";
        if (applicationCode === undefined || applicationCode === null)
            throw new Error("The parameter 'applicationCode' must be defined.");
        url_ = url_.replace("{applicationCode}", encodeURIComponent("" + applicationCode));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPremium(_response);
        });
    }

    protected processPremium(response: AxiosResponse): Promise<CustomerResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<CustomerResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerResponseDtoListServiceResponse>(null as any);
    }

    /**
     * แสดงข้อมูล Application
     * @param applicationCode (optional)
     * @param schoolName (optional)
     * @param branchId (optional)
     * @param year (optional)
     * @param searchDetail (optional)
     * @return Success
     */
    application(applicationCode?: string | undefined, schoolName?: string | undefined, branchId?: number | undefined, year?: number | undefined, searchDetail?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ApplicationResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/Premium/Application?";
        if (applicationCode === null)
            throw new Error("The parameter 'applicationCode' cannot be null.");
        else if (applicationCode !== undefined)
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        if (schoolName === null)
            throw new Error("The parameter 'schoolName' cannot be null.");
        else if (schoolName !== undefined)
            url_ += "SchoolName=" + encodeURIComponent("" + schoolName) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processApplication(_response);
        });
    }

    protected processApplication(response: AxiosResponse): Promise<ApplicationResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<ApplicationResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationResponseDtoListServiceResponse>(null as any);
    }

    /**
     * แสดงข้อมูลตัวแทน
     * @param agentTypeId (optional)
     * @return Success
     */
    agent(applicationCode: string, agentTypeId?: string | undefined, cancelToken?: CancelToken | undefined): Promise<AgentResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/Premium/Agent?";
        if (applicationCode === undefined || applicationCode === null)
            throw new Error("The parameter 'applicationCode' must be defined and cannot be null.");
        else
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        if (agentTypeId === null)
            throw new Error("The parameter 'agentTypeId' cannot be null.");
        else if (agentTypeId !== undefined)
            url_ += "AgentTypeId=" + encodeURIComponent("" + agentTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAgent(_response);
        });
    }

    protected processAgent(response: AxiosResponse): Promise<AgentResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<AgentResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AgentResponseDtoListServiceResponse>(null as any);
    }

    /**
     * แสดงข้อมูล Document
     * @return Success
     */
    document(applicationCode: string, cancelToken?: CancelToken | undefined): Promise<DocumentResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/Premium/Document?";
        if (applicationCode === undefined || applicationCode === null)
            throw new Error("The parameter 'applicationCode' must be defined and cannot be null.");
        else
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDocument(_response);
        });
    }

    protected processDocument(response: AxiosResponse): Promise<DocumentResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<DocumentResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DocumentResponseDtoListServiceResponse>(null as any);
    }

    /**
     * @param applicationCode (optional)
     * @param schoolName (optional)
     * @param branchId (optional)
     * @param year (optional)
     * @param searchDetail (optional)
     * @return Success
     */
    applicationAll(applicationCode?: string | undefined, schoolName?: string | undefined, branchId?: number | undefined, year?: number | undefined, searchDetail?: string | undefined, cancelToken?: CancelToken | undefined): Promise<ApplicationResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/Premium/ApplicationAll?";
        if (applicationCode === null)
            throw new Error("The parameter 'applicationCode' cannot be null.");
        else if (applicationCode !== undefined)
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        if (schoolName === null)
            throw new Error("The parameter 'schoolName' cannot be null.");
        else if (schoolName !== undefined)
            url_ += "SchoolName=" + encodeURIComponent("" + schoolName) + "&";
        if (branchId === null)
            throw new Error("The parameter 'branchId' cannot be null.");
        else if (branchId !== undefined)
            url_ += "BranchId=" + encodeURIComponent("" + branchId) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (searchDetail === null)
            throw new Error("The parameter 'searchDetail' cannot be null.");
        else if (searchDetail !== undefined)
            url_ += "SearchDetail=" + encodeURIComponent("" + searchDetail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processApplicationAll(_response);
        });
    }

    protected processApplicationAll(response: AxiosResponse): Promise<ApplicationResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<ApplicationResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApplicationResponseDtoListServiceResponse>(null as any);
    }
}

export class EditApplicationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional)
     * @return Success
     */
    editApplication(body?: EditApplication | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/EditApplication/EditApplication";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEditApplication(_response);
        });
    }

    protected processEditApplication(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    publish(cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/EditApplication/Publish";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPublish(_response);
        });
    }

    protected processPublish(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PAOrderCreateClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional)
     * @return Success
     */
    pAOrderCreate(body?: PAOrderCreate | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PAOrderCreate/PAOrderCreate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPAOrderCreate(_response);
        });
    }

    protected processPAOrderCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    publish2(cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PAOrderCreate/Publish";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPublish2(_response);
        });
    }

    protected processPublish2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PaymentApprovedClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional)
     * @return Success
     */
    paymentApproved(body?: PaymentApproved | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PaymentApproved/paymentApproved";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPaymentApproved(_response);
        });
    }

    protected processPaymentApproved(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    publish3(cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PaymentApproved/Publish";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPublish3(_response);
        });
    }

    protected processPublish3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PaymentDocumentClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional)
     * @return Success
     */
    paymentDocument(body?: PaymentDocument | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PaymentDocument/PaymentDocument";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPaymentDocument(_response);
        });
    }

    protected processPaymentDocument(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class RequestApplicationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param app (optional)
     * @return Success
     */
    requestApp(app?: string | undefined, cancelToken?: CancelToken | undefined): Promise<RequestApplicationResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/RequestApplication/RequestApp?";
        if (app === null)
            throw new Error("The parameter 'app' cannot be null.");
        else if (app !== undefined)
            url_ += "app=" + encodeURIComponent("" + app) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRequestApp(_response);
        });
    }

    protected processRequestApp(response: AxiosResponse): Promise<RequestApplicationResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<RequestApplicationResponseDtoServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RequestApplicationResponseDtoServiceResponse>(null as any);
    }

    /**
     * @param applicationCode (optional)
     * @return Success
     */
    requestAppComsumer(applicationCode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/RequestApplication/RequestApp-Comsumer?";
        if (applicationCode === null)
            throw new Error("The parameter 'applicationCode' cannot be null.");
        else if (applicationCode !== undefined)
            url_ += "ApplicationCode=" + encodeURIComponent("" + applicationCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRequestAppComsumer(_response);
        });
    }

    protected processRequestAppComsumer(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class SchoolYearClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * แสดงข้อมูล ปีการศึกษา
     * @param year (optional)
     * @return Success
     */
    schoolYear(year?: string | undefined, cancelToken?: CancelToken | undefined): Promise<YearResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/SchoolYear?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSchoolYear(_response);
        });
    }

    protected processSchoolYear(response: AxiosResponse): Promise<YearResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<YearResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<YearResponseDtoListServiceResponse>(null as any);
    }
}

export class TestTriggerJobClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Post EmployeeInformationJob
     * @return Success
     */
    updateCustomerPolicyJob(cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/UpdateCustomerPolicyJob";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateCustomerPolicyJob(_response);
        });
    }

    protected processUpdateCustomerPolicyJob(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<void>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface AgentResponseDto {
    year?: number;
    agentTypeId?: string | undefined;
    agentTypeName?: string | undefined;
    userId?: number;
    employeeCode?: string | undefined;
    employeeName?: string | undefined;
}

export interface AgentResponseDtoListServiceResponse {
    data?: AgentResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface ApplicationResponseDto {
    applicationCode?: string | undefined;
    year?: number;
    schoolName?: string | undefined;
    fullAddress?: string | undefined;
    statusName?: string | undefined;
    contactName?: string | undefined;
    contactPhoneNo?: string | undefined;
    productName?: string | undefined;
    productInitial?: string | undefined;
    productCategory?: string | undefined;
    studentCount?: number;
    personnelCount?: number;
    freePersonnelCount?: number;
    amountNet?: number | undefined;
    amountDept?: number | undefined;
    amountReceive?: number | undefined;
    fullDetail?: string | undefined;
    branchId?: number;
    branchDetail?: string | undefined;
    startCoverDate?: dayjs.Dayjs | undefined;
    effectiveDate?: dayjs.Dayjs | undefined;
    endCoverDate?: dayjs.Dayjs | undefined;
}

export interface ApplicationResponseDtoListServiceResponse {
    data?: ApplicationResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CustomerProductResponseDto {
    titelname?: string | undefined;
    surname?: string | undefined;
    lastname?: string | undefined;
    fullname?: string | undefined;
    productName?: string | undefined;
}

export interface CustomerProductResponseDtoListServiceResponse {
    data?: CustomerProductResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface CustomerResponseDto {
    code?: string | undefined;
    revise?: number;
    discountAmount?: number;
    discountOperationCost?: number;
    discountAdvance?: number;
    discountTax?: number;
    amountNet?: number;
}

export interface CustomerResponseDtoListServiceResponse {
    data?: CustomerResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface DocumentResponseDto {
    documentCode?: string | undefined;
    documentTypeName?: string | undefined;
    documentGroupName?: string | undefined;
}

export interface DocumentResponseDtoListServiceResponse {
    data?: DocumentResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface EditApplication {
    debtHeaderId?: string | undefined;
    fromApplicationCode?: string | undefined;
    fromSendPhone?: string | undefined;
    toApplicationCode?: string | undefined;
    toSendPhone?: string | undefined;
    toSchoolName?: string | undefined;
    toContactName?: string | undefined;
    toFullAddress?: string | undefined;
    remark?: string | undefined;
    updatedByUserId?: number | undefined;
    updatedDate?: dayjs.Dayjs | undefined;
    documentId?: string | undefined;
}

export interface PAOrderCreate {
    debtGroupId?: string | undefined;
    debtGroupCode?: string | undefined;
    debtHeaderId?: string | undefined;
    bill?: string | undefined;
    debtDetailId?: string | undefined;
    in?: string | undefined;
    applicationCode?: string | undefined;
    createdByUserId?: number | undefined;
    createDate?: dayjs.Dayjs | undefined;
    amountPayable?: number | undefined;
    phoneNo?: string | undefined;
    payablePeriodTo?: dayjs.Dayjs | undefined;
    paymentMethodTypeId?: number | undefined;
    paymentMethodTypeName?: string | undefined;
}

export interface PaymentApproved {
    summaryDetailId?: string | undefined;
    debtHeaderId?: string | undefined;
    paymentChannelId?: number;
    paymentChannelName?: string | undefined;
    transactionDatetime?: dayjs.Dayjs;
    transferAmount?: number;
    transactionRef?: string | undefined;
    updatedDate?: dayjs.Dayjs;
    isSucceed?: boolean | undefined;
    description?: string | undefined;
}

export interface PaymentDocument {
    summaryDetailId?: string | undefined;
    debtHeaderId?: string | undefined;
    applicationCode?: string | undefined;
    documentId?: string | undefined;
}

export interface RequestApplicationResponseDto {
    app_id?: string | undefined;
    year?: number | undefined;
    branch_id?: string | undefined;
    branch?: string | undefined;
    province_id?: string | undefined;
    province?: string | undefined;
    amphur_id?: string | undefined;
    amphur?: string | undefined;
    tumbol_id?: string | undefined;
    tambol?: string | undefined;
    school_id?: string | undefined;
    school?: string | undefined;
    contactPositionId?: number | undefined;
    contactPositionName?: string | undefined;
    contactTitleCode?: string | undefined;
    contactTitleName?: string | undefined;
    contactName?: string | undefined;
    contactPhoneNo?: string | undefined;
    contactFaxNo?: string | undefined;
    directorTitleCode?: string | undefined;
    directorTitleName?: string | undefined;
    directorPositionId?: number | undefined;
    directorPositionName?: string | undefined;
    directorName?: string | undefined;
    directorPhoneNo?: string | undefined;
    contactBankCode?: string | undefined;
    contactBank?: string | undefined;
    contactBankAccountNo?: string | undefined;
    contactBankAccountName?: string | undefined;
    directorZCard?: string | undefined;
    directorPassport?: string | undefined;
    contactZCard?: string | undefined;
    contactPassport?: string | undefined;
    startCoverDate?: dayjs.Dayjs | undefined;
    effectiveDate?: dayjs.Dayjs | undefined;
    endCoverDate?: dayjs.Dayjs | undefined;
    isActive?: boolean | undefined;
    contactType_id?: string | undefined;
    contactType?: string | undefined;
    levelSchool_id?: string | undefined;
    levelSchool?: string | undefined;
    levelRate_id?: string | undefined;
    levelRate?: string | undefined;
    insuranceCompany_id?: string | undefined;
    insuranceCompany?: string | undefined;
    status_id?: string | undefined;
    status?: string | undefined;
    policyGroup_id?: string | undefined;
    policyGroup?: string | undefined;
    product_id?: string | undefined;
    product?: string | undefined;
    productInitial?: string | undefined;
    premium?: number | undefined;
    discount_Amount?: number | undefined;
    discount_OperationCost?: number | undefined;
    discount_Advance?: number | undefined;
    discount_Tax?: number | undefined;
    amount_Net?: number | undefined;
    amount_Dept?: number | undefined;
    amount_Receive?: number | undefined;
    createdBy_id?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    isBypass?: boolean | undefined;
    paymentStatus_id?: string | undefined;
    paymentStatus?: string | undefined;
    requestCoverReportStatus_ID?: string | undefined;
    requestCoverReportStatus?: string | undefined;
    requestCover_IsLeader?: boolean | undefined;
    requestPolicyReportStatus_ID?: string | undefined;
    requestPolicyReportStatus?: string | undefined;
    requestPolicy_IsLeader?: boolean | undefined;
    shortName?: string | undefined;
    schoolArea_Id?: string | undefined;
    schoolArea?: string | undefined;
    detail?: string | undefined;
    productCategory?: string | undefined;
    is2ndTerm?: boolean | undefined;
    isEndorseCoverReport?: boolean | undefined;
    isEndorsePolicyReport?: boolean | undefined;
    isApplicationCancelReport?: boolean | undefined;
    applicationDate?: dayjs.Dayjs | undefined;
    schoolTitle?: string | undefined;
    schoolName?: string | undefined;
    studyArea?: string | undefined;
    isSafeSchool?: boolean | undefined;
    porType?: string | undefined;
}

export interface RequestApplicationResponseDtoServiceResponse {
    data?: RequestApplicationResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface YearResponseDto {
    year?: string | undefined;
}

export interface YearResponseDtoListServiceResponse {
    data?: YearResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}